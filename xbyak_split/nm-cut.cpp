    void gen0()
    {
jmp (rsp); dump();
jmp (r15); dump();
jmp (rax); dump();
call (rbp); dump();
call (r10); dump();
call (rax); dump();
jmp (ptr[eax+ecx+3]); dump();
jmp (ptr[rdx+r15+0x12]); dump();
jmp (ptr[eax+ecx+3]); dump();
jmp (ptr[rdx+r15+0x12]); dump();
jmp (ptr[eax+ecx+3]); dump();
jmp (ptr[rdx+r15+0x12]); dump();
call (ptr[eax+ecx+3]); dump();
call (ptr[(void*)0x123]); dump();
call (ptr[rdx+r15+0x12]); dump();
call (getCode() + 5 ); dump();
jmp (ptr[(void*)0x12345678] ); dump();
call (ptr[(void*)0x12345678] ); dump();
{ Label label0;
L(label0);
pshufb (xmm14, ptr [rip+label0]); dump();
}
cdqe (); dump();
cqo (); dump();
cmpsq (); dump();
movsq (); dump();
popfq (); dump();
pushfq (); dump();
lodsq (); dump();
movsq (); dump();
scasq (); dump();
stosq (); dump();
syscall (); dump();
sysret (); dump();
cbw (); dump();
cdq (); dump();
clc (); dump();
cld (); dump();
cli (); dump();
cmc (); dump();
cpuid (); dump();
cwd (); dump();
cwde (); dump();
lahf (); dump();
cmpsb (); dump();
cmpsw (); dump();
cmpsd (); dump();
int3 (); dump();
leave (); dump();
lodsb (); dump();
lodsw (); dump();
lodsd (); dump();
movsb (); dump();
movsw (); dump();
movsd (); dump();
outsb (); dump();
outsw (); dump();
outsd (); dump();
scasb (); dump();
scasw (); dump();
scasd (); dump();
stosb (); dump();
stosw (); dump();
stosd (); dump();
nop (); dump();
sahf (); dump();
stc (); dump();
std (); dump();
sti (); dump();
sysenter (); dump();
sysexit (); dump();
emms (); dump();
pause (); dump();
sfence (); dump();
lfence (); dump();
mfence (); dump();
monitor (); dump();
mwait (); dump();
rdmsr (); dump();
rdpmc (); dump();
rdtsc (); dump();
rdtscp (); dump();
ud2 (); dump();
wait (); dump();
fwait (); dump();
wbinvd (); dump();
wrmsr (); dump();
xlatb (); dump();
popf (); dump();
pushf (); dump();
stac (); dump();
xgetbv (); dump();
vzeroall (); dump();
vzeroupper (); dump();
f2xm1 (); dump();
fabs (); dump();
faddp (); dump();
fchs (); dump();
fclex (); dump();
fnclex (); dump();
fcom (); dump();
fcomp (); dump();
fcompp (); dump();
fcos (); dump();
fdecstp (); dump();
fdivp (); dump();
fdivrp (); dump();
fincstp (); dump();
finit (); dump();
fninit (); dump();
fld1 (); dump();
fldl2t (); dump();
fldl2e (); dump();
fldpi (); dump();
fldlg2 (); dump();
fldln2 (); dump();
fldz (); dump();
fmulp (); dump();
fnop (); dump();
fpatan (); dump();
fprem (); dump();
fprem1 (); dump();
fptan (); dump();
frndint (); dump();
fscale (); dump();
fsin (); dump();
fsincos (); dump();
fsqrt (); dump();
fsubp (); dump();
fsubrp (); dump();
ftst (); dump();
fucom (); dump();
fucomp (); dump();
fucompp (); dump();
fxam (); dump();
fxch (); dump();
fxtract (); dump();
fyl2x (); dump();
fyl2xp1 (); dump();
monitorx (); dump();
mwaitx (); dump();
clzero (); dump();
clflush (ptr[eax+ecx+3]); dump();
clflush (ptr[rdx+r15+0x12]); dump();
clflushopt (ptr[eax+ecx+3]); dump();
clflushopt (ptr[rdx+r15+0x12]); dump();
fbld (ptr[eax+ecx+3]); dump();
fbld (ptr[rdx+r15+0x12]); dump();
fbstp (ptr[eax+ecx+3]); dump();
fbstp (ptr[rdx+r15+0x12]); dump();
fldcw (ptr[eax+ecx+3]); dump();
fldcw (ptr[rdx+r15+0x12]); dump();
fldenv (ptr[eax+ecx+3]); dump();
fldenv (ptr[rdx+r15+0x12]); dump();
frstor (ptr[eax+ecx+3]); dump();
frstor (ptr[rdx+r15+0x12]); dump();
fsave (ptr[eax+ecx+3]); dump();
fsave (ptr[rdx+r15+0x12]); dump();
fnsave (ptr[eax+ecx+3]); dump();
fnsave (ptr[rdx+r15+0x12]); dump();
fstcw (ptr[eax+ecx+3]); dump();
fstcw (ptr[rdx+r15+0x12]); dump();
fnstcw (ptr[eax+ecx+3]); dump();
fnstcw (ptr[rdx+r15+0x12]); dump();
fstenv (ptr[eax+ecx+3]); dump();
fstenv (ptr[rdx+r15+0x12]); dump();
fnstenv (ptr[eax+ecx+3]); dump();
fnstenv (ptr[rdx+r15+0x12]); dump();
fstsw (ptr[eax+ecx+3]); dump();
fstsw (ptr[rdx+r15+0x12]); dump();
fnstsw (ptr[eax+ecx+3]); dump();
fnstsw (ptr[rdx+r15+0x12]); dump();
fxrstor (ptr[eax+ecx+3]); dump();
fxrstor (ptr[rdx+r15+0x12]); dump();
fstsw (ax); dump();
fnstsw (ax); dump();
bswap (edi); dump();
bswap (eax); dump();
bswap (r12d); dump();
bswap (rsi); dump();
bswap (r8); dump();
bswap (rax); dump();
lea (ebp, ptr[eax+ecx+3]); dump();
lea (edi, ptr[rdx+r15+0x12]); dump();
lea (eax, ptr[eax+ecx+3]); dump();
lea (eax, ptr[rdx+r15+0x12]); dump();
lea (si, ptr[eax+ecx+3]); dump();
lea (dx, ptr[rdx+r15+0x12]); dump();
lea (ax, ptr[eax+ecx+3]); dump();
lea (ax, ptr[rdx+r15+0x12]); dump();
lea (r13d, ptr[eax+ecx+3]); dump();
lea (r14d, ptr[rdx+r15+0x12]); dump();
lea (r11w, ptr[eax+ecx+3]); dump();
lea (r11w, ptr[rdx+r15+0x12]); dump();
lea (rbx, ptr[eax+ecx+3]); dump();
lea (rdi, ptr[rdx+r15+0x12]); dump();
lea (r14, ptr[eax+ecx+3]); dump();
lea (r8, ptr[rdx+r15+0x12]); dump();
lea (rax, ptr[eax+ecx+3]); dump();
lea (rax, ptr[rdx+r15+0x12]); dump();
enter (4, 4); dump();
enter (4, 0xda); dump();
enter (0xda, 4); dump();
enter (0xda, 0xda); dump();
int_ (4); dump();
in_ (eax, 4); dump();
in_ (ax, 4); dump();
in_ (al, 4); dump();
in_(al, dx); dump();
in_(ax, dx); dump();
in_(eax, dx); dump();
out_ (4, eax); dump();
out_ (4, ax); dump();
out_ (4, al); dump();
out_(dx, al); dump();
out_(dx, ax); dump();
out_(dx, eax); dump();
adc (edi, ptr[eax+ecx+3]); dump();
adc (ebx, ebp); dump();
adc (ebx, eax); dump();
adc (ecx, ptr[rdx+r15+0x12]); dump();
adc (edi, r12d); dump();
adc (eax, ptr[eax+ecx+3]); dump();
adc (eax, edx); dump();
adc (eax, eax); dump();
adc (eax, ptr[rdx+r15+0x12]); dump();
adc (eax, r8d); dump();
adc (r13d, ptr[eax+ecx+3]); dump();
adc (r15d, esp); dump();
adc (r10d, eax); dump();
adc (r14d, ptr[rdx+r15+0x12]); dump();
adc (r8d, r13d); dump();
adc (rdi, ptr[eax+ecx+3]); dump();
adc (rdi, ptr[rdx+r15+0x12]); dump();
adc (rsp, rdx); dump();
adc (rsp, r12); dump();
adc (rcx, rax); dump();
adc (r15, ptr[eax+ecx+3]); dump();
adc (r10, ptr[rdx+r15+0x12]); dump();
adc (r8, rcx); dump();
adc (r15, r10); dump();
adc (r11, rax); dump();
adc (rax, ptr[eax+ecx+3]); dump();
adc (rax, ptr[rdx+r15+0x12]); dump();
adc (rax, rsi); dump();
adc (rax, r14); dump();
adc (rax, rax); dump();
adc (dx, ptr[eax+ecx+3]); dump();
adc (cx, cx); dump();
adc (si, ax); dump();
adc (dx, ptr[rdx+r15+0x12]); dump();
adc (bp, r14w); dump();
adc (ax, ptr[eax+ecx+3]); dump();
adc (ax, cx); dump();
adc (ax, ax); dump();
adc (ax, ptr[rdx+r15+0x12]); dump();
adc (ax, r11w); dump();
adc (r11w, ptr[eax+ecx+3]); dump();
adc (r8w, di); dump();
adc (r8w, ax); dump();
adc (r11w, ptr[rdx+r15+0x12]); dump();
adc (r8w, r9w); dump();
adc (bl, ptr[eax+ecx+3]); dump();
adc (dl, cl); dump();
adc (cl, al); dump();
adc (bl, ptr[rdx+r15+0x12]); dump();
adc (cl, r13b); dump();
adc (al, ptr[eax+ecx+3]); dump();
adc (al, cl); dump();
adc (al, al); dump();
adc (al, ptr[rdx+r15+0x12]); dump();
adc (al, r10b); dump();
adc (r9b, ptr[eax+ecx+3]); dump();
adc (r8b, dl); dump();
adc (r11b, al); dump();
adc (r9b, ptr[rdx+r15+0x12]); dump();
adc (r8b, r8b); dump();
adc (dil, ptr[eax+ecx+3]); dump();
adc (spl, cl); dump();
adc (dil, al); dump();
adc (bpl, ptr[rdx+r15+0x12]); dump();
adc (bpl, r8b); dump();
adc (ptr[eax+ecx+3], edi); dump();
adc (ptr[eax+ecx+3], eax); dump();
adc (ptr[eax+ecx+3], cl); dump();
adc (ptr[eax+ecx+3], bp); dump();
adc (ptr[eax+ecx+3], ax); dump();
adc (ptr[eax+ecx+3], al); dump();
adc (ptr[eax+ecx+3], r13d); dump();
adc (ptr[eax+ecx+3], r13w); dump();
adc (ptr[eax+ecx+3], r12b); dump();
adc (ptr[eax+ecx+3], dil); dump();
adc (ptr[eax+ecx+3], rsp); dump();
adc (ptr[eax+ecx+3], r11); dump();
adc (ptr[eax+ecx+3], rax); dump();
adc (ptr[rdx+r15+0x12], edx); dump();
adc (ptr[rdx+r15+0x12], eax); dump();
adc (ptr[rdx+r15+0x12], cl); dump();
adc (ptr[rdx+r15+0x12], cx); dump();
adc (ptr[rdx+r15+0x12], ax); dump();
adc (ptr[rdx+r15+0x12], al); dump();
adc (ptr[rdx+r15+0x12], r12d); dump();
adc (ptr[rdx+r15+0x12], r10w); dump();
adc (ptr[rdx+r15+0x12], r11b); dump();
adc (ptr[rdx+r15+0x12], spl); dump();
adc (ptr[rdx+r15+0x12], rbp); dump();
adc (ptr[rdx+r15+0x12], r15); dump();
adc (ptr[rdx+r15+0x12], rax); dump();
adc (byte [eax+edx], 4); dump();
adc (byte [eax+edx], -30); dump();
adc (word [esi], 4); dump();
adc (word [esi], -30); dump();
adc (word [esi], 1000); dump();
adc (word [esi], -1000); dump();
adc (dword [ebp*2], 12345678); dump();
adc (dword [ebp*2], 4); dump();
adc (dword [ebp*2], -30); dump();
adc (dword [ebp*2], -100000); dump();
adc (rcx, 4); dump();
adc (rsp, -30); dump();
adc (r15, 4); dump();
adc (r11, -30); dump();
adc (rax, 4); dump();
adc (rax, -30); dump();
adc (rbp, 0x12345678); dump();
adc (r12, 0x12345678); dump();
adc (rax, 0x12345678); dump();
adc (rsp, 192); dump();
adc (r14, 192); dump();
adc (rax, 192); dump();
adc (rcx, 0x1234); dump();
adc (r10, 0x1234); dump();
adc (rax, 0x1234); dump();
adc (esi, 12345678); dump();
adc (ebx, 4); dump();
adc (ecx, -30); dump();
adc (eax, 12345678); dump();
adc (eax, 4); dump();
adc (eax, -30); dump();
adc (r12d, 12345678); dump();
adc (r14d, 4); dump();
adc (r15d, -30); dump();
adc (si, 4); dump();
adc (cx, -30); dump();
adc (bx, 1000); dump();
adc (cx, -1000); dump();
adc (ax, 4); dump();
adc (ax, -30); dump();
adc (ax, 1000); dump();
adc (ax, -1000); dump();
adc (r15w, 4); dump();
adc (r11w, -30); dump();
adc (r13w, 1000); dump();
adc (r13w, -1000); dump();
adc (al, -30); dump();
adc (bl, 4); dump();
adc (dl, 0xda); dump();
adc (al, -30); dump();
adc (al, 4); dump();
adc (al, 0xda); dump();
adc (r12b, -30); dump();
adc (r9b, 4); dump();
adc (r10b, 0xda); dump();
adc (sil, -30); dump();
adc (bpl, 4); dump();
adc (bpl, 0xda); dump();
add (ecx, ptr[eax+ecx+3]); dump();
add (esi, edi); dump();
add (ebx, eax); dump();
add (ebx, ptr[rdx+r15+0x12]); dump();
add (ecx, r11d); dump();
add (eax, ptr[eax+ecx+3]); dump();
add (eax, edi); dump();
add (eax, eax); dump();
add (eax, ptr[rdx+r15+0x12]); dump();
add (eax, r11d); dump();
add (r14d, ptr[eax+ecx+3]); dump();
add (r15d, ecx); dump();
add (r11d, eax); dump();
add (r14d, ptr[rdx+r15+0x12]); dump();
add (r12d, r14d); dump();
add (rbx, ptr[eax+ecx+3]); dump();
add (rsp, ptr[rdx+r15+0x12]); dump();
add (rcx, rbp); dump();
add (rdi, r9); dump();
add (rbx, rax); dump();
add (r12, ptr[eax+ecx+3]); dump();
add (r11, ptr[rdx+r15+0x12]); dump();
add (r12, rcx); dump();
add (r10, r11); dump();
add (r10, rax); dump();
add (rax, ptr[eax+ecx+3]); dump();
add (rax, ptr[rdx+r15+0x12]); dump();
add (rax, rdx); dump();
add (rax, r13); dump();
add (rax, rax); dump();
add (bp, ptr[eax+ecx+3]); dump();
add (cx, si); dump();
add (bp, ax); dump();
add (bx, ptr[rdx+r15+0x12]); dump();
add (sp, r10w); dump();
add (ax, ptr[eax+ecx+3]); dump();
add (ax, bp); dump();
add (ax, ax); dump();
add (ax, ptr[rdx+r15+0x12]); dump();
add (ax, r12w); dump();
add (r8w, ptr[eax+ecx+3]); dump();
add (r13w, di); dump();
add (r13w, ax); dump();
add (r15w, ptr[rdx+r15+0x12]); dump();
add (r9w, r13w); dump();
add (al, ptr[eax+ecx+3]); dump();
add (bl, cl); dump();
add (cl, al); dump();
add (cl, ptr[rdx+r15+0x12]); dump();
add (cl, r15b); dump();
add (al, ptr[eax+ecx+3]); dump();
add (al, cl); dump();
add (al, al); dump();
add (al, ptr[rdx+r15+0x12]); dump();
add (al, r15b); dump();
add (r14b, ptr[eax+ecx+3]); dump();
add (r10b, dl); dump();
add (r15b, al); dump();
add (r12b, ptr[rdx+r15+0x12]); dump();
add (r13b, r12b); dump();
add (spl, ptr[eax+ecx+3]); dump();
add (bpl, cl); dump();
add (dil, al); dump();
add (spl, ptr[rdx+r15+0x12]); dump();
add (spl, r10b); dump();
add (ptr[eax+ecx+3], esp); dump();
add (ptr[eax+ecx+3], eax); dump();
add (ptr[eax+ecx+3], cl); dump();
add (ptr[eax+ecx+3], si); dump();
add (ptr[eax+ecx+3], ax); dump();
add (ptr[eax+ecx+3], al); dump();
add (ptr[eax+ecx+3], r14d); dump();
add (ptr[eax+ecx+3], r13w); dump();
add (ptr[eax+ecx+3], r12b); dump();
add (ptr[eax+ecx+3], dil); dump();
add (ptr[eax+ecx+3], rbp); dump();
add (ptr[eax+ecx+3], r12); dump();
add (ptr[eax+ecx+3], rax); dump();
add (ptr[rdx+r15+0x12], ecx); dump();
add (ptr[rdx+r15+0x12], eax); dump();
add (ptr[rdx+r15+0x12], bl); dump();
add (ptr[rdx+r15+0x12], dx); dump();
add (ptr[rdx+r15+0x12], ax); dump();
add (ptr[rdx+r15+0x12], al); dump();
add (ptr[rdx+r15+0x12], r14d); dump();
add (ptr[rdx+r15+0x12], r8w); dump();
add (ptr[rdx+r15+0x12], r10b); dump();
add (ptr[rdx+r15+0x12], bpl); dump();
add (ptr[rdx+r15+0x12], rdx); dump();
add (ptr[rdx+r15+0x12], r15); dump();
add (ptr[rdx+r15+0x12], rax); dump();
add (byte [eax+edx], 4); dump();
add (byte [eax+edx], -30); dump();
add (word [esi], 4); dump();
add (word [esi], -30); dump();
add (word [esi], 1000); dump();
add (word [esi], -1000); dump();
add (dword [ebp*2], 12345678); dump();
add (dword [ebp*2], 4); dump();
add (dword [ebp*2], -30); dump();
add (dword [ebp*2], -100000); dump();
add (rbp, 4); dump();
add (rcx, -30); dump();
add (r10, 4); dump();
add (r9, -30); dump();
add (rax, 4); dump();
add (rax, -30); dump();
add (rdi, 0x12345678); dump();
add (r14, 0x12345678); dump();
add (rax, 0x12345678); dump();
add (rcx, 192); dump();
add (r12, 192); dump();
add (rax, 192); dump();
add (rsi, 0x1234); dump();
add (r10, 0x1234); dump();
add (rax, 0x1234); dump();
add (edi, 12345678); dump();
add (edx, 4); dump();
add (edi, -30); dump();
add (eax, 12345678); dump();
add (eax, 4); dump();
add (eax, -30); dump();
add (r9d, 12345678); dump();
add (r13d, 4); dump();
add (r8d, -30); dump();
add (sp, 4); dump();
add (di, -30); dump();
add (cx, 1000); dump();
add (dx, -1000); dump();
add (ax, 4); dump();
add (ax, -30); dump();
add (ax, 1000); dump();
add (ax, -1000); dump();
add (r15w, 4); dump();
add (r10w, -30); dump();
add (r15w, 1000); dump();
add (r9w, -1000); dump();
add (dl, -30); dump();
add (dl, 4); dump();
add (cl, 0xda); dump();
add (al, -30); dump();
add (al, 4); dump();
add (al, 0xda); dump();
add (r10b, -30); dump();
add (r9b, 4); dump();
add (r11b, 0xda); dump();
add (sil, -30); dump();
add (spl, 4); dump();
add (sil, 0xda); dump();
and_ (edi, ptr[eax+ecx+3]); dump();
and_ (ebx, esp); dump();
and_ (ecx, eax); dump();
and_ (ecx, ptr[rdx+r15+0x12]); dump();
and_ (esp, r10d); dump();
and_ (eax, ptr[eax+ecx+3]); dump();
and_ (eax, edi); dump();
and_ (eax, eax); dump();
and_ (eax, ptr[rdx+r15+0x12]); dump();
and_ (eax, r14d); dump();
and_ (r13d, ptr[eax+ecx+3]); dump();
and_ (r13d, edi); dump();
and_ (r10d, eax); dump();
and_ (r13d, ptr[rdx+r15+0x12]); dump();
and_ (r13d, r12d); dump();
and_ (rbx, ptr[eax+ecx+3]); dump();
and_ (rsi, ptr[rdx+r15+0x12]); dump();
and_ (rbp, rsi); dump();
and_ (rsp, r9); dump();
and_ (rbp, rax); dump();
and_ (r10, ptr[eax+ecx+3]); dump();
and_ (r14, ptr[rdx+r15+0x12]); dump();
and_ (r15, rdi); dump();
and_ (r8, r11); dump();
and_ (r13, rax); dump();
and_ (rax, ptr[eax+ecx+3]); dump();
and_ (rax, ptr[rdx+r15+0x12]); dump();
and_ (rax, rbp); dump();
and_ (rax, r14); dump();
and_ (rax, rax); dump();
and_ (dx, ptr[eax+ecx+3]); dump();
and_ (di, di); dump();
and_ (cx, ax); dump();
and_ (bx, ptr[rdx+r15+0x12]); dump();
and_ (cx, r13w); dump();
and_ (ax, ptr[eax+ecx+3]); dump();
and_ (ax, bp); dump();
and_ (ax, ax); dump();
and_ (ax, ptr[rdx+r15+0x12]); dump();
and_ (ax, r14w); dump();
and_ (r14w, ptr[eax+ecx+3]); dump();
and_ (r15w, bx); dump();
and_ (r8w, ax); dump();
and_ (r14w, ptr[rdx+r15+0x12]); dump();
and_ (r13w, r10w); dump();
and_ (bl, ptr[eax+ecx+3]); dump();
and_ (bl, bl); dump();
and_ (al, al); dump();
and_ (cl, ptr[rdx+r15+0x12]); dump();
and_ (dl, r8b); dump();
and_ (al, ptr[eax+ecx+3]); dump();
and_ (al, dl); dump();
and_ (al, al); dump();
and_ (al, ptr[rdx+r15+0x12]); dump();
and_ (al, r9b); dump();
and_ (r10b, ptr[eax+ecx+3]); dump();
and_ (r13b, bl); dump();
and_ (r11b, al); dump();
and_ (r10b, ptr[rdx+r15+0x12]); dump();
and_ (r11b, r13b); dump();
and_ (bpl, ptr[eax+ecx+3]); dump();
and_ (spl, bl); dump();
and_ (spl, al); dump();
and_ (sil, ptr[rdx+r15+0x12]); dump();
and_ (sil, r12b); dump();
and_ (ptr[eax+ecx+3], esp); dump();
and_ (ptr[eax+ecx+3], eax); dump();
and_ (ptr[eax+ecx+3], cl); dump();
and_ (ptr[eax+ecx+3], si); dump();
and_ (ptr[eax+ecx+3], ax); dump();
and_ (ptr[eax+ecx+3], al); dump();
and_ (ptr[eax+ecx+3], r8d); dump();
and_ (ptr[eax+ecx+3], r11w); dump();
and_ (ptr[eax+ecx+3], r10b); dump();
and_ (ptr[eax+ecx+3], bpl); dump();
and_ (ptr[eax+ecx+3], rsp); dump();
and_ (ptr[eax+ecx+3], r9); dump();
and_ (ptr[eax+ecx+3], rax); dump();
and_ (ptr[rdx+r15+0x12], ecx); dump();
and_ (ptr[rdx+r15+0x12], eax); dump();
and_ (ptr[rdx+r15+0x12], dl); dump();
and_ (ptr[rdx+r15+0x12], cx); dump();
and_ (ptr[rdx+r15+0x12], ax); dump();
and_ (ptr[rdx+r15+0x12], al); dump();
and_ (ptr[rdx+r15+0x12], r10d); dump();
and_ (ptr[rdx+r15+0x12], r9w); dump();
and_ (ptr[rdx+r15+0x12], r15b); dump();
and_ (ptr[rdx+r15+0x12], spl); dump();
and_ (ptr[rdx+r15+0x12], rsp); dump();
and_ (ptr[rdx+r15+0x12], r10); dump();
and_ (ptr[rdx+r15+0x12], rax); dump();
and_ (byte [eax+edx], 4); dump();
and_ (byte [eax+edx], -30); dump();
and_ (word [esi], 4); dump();
and_ (word [esi], -30); dump();
and_ (word [esi], 1000); dump();
and_ (word [esi], -1000); dump();
and_ (dword [ebp*2], 12345678); dump();
and_ (dword [ebp*2], 4); dump();
and_ (dword [ebp*2], -30); dump();
and_ (dword [ebp*2], -100000); dump();
and_ (rcx, 4); dump();
and_ (rsp, -30); dump();
and_ (r8, 4); dump();
and_ (r10, -30); dump();
and_ (rax, 4); dump();
and_ (rax, -30); dump();
and_ (rdx, 0x12345678); dump();
and_ (r12, 0x12345678); dump();
and_ (rax, 0x12345678); dump();
and_ (rsp, 192); dump();
and_ (r8, 192); dump();
and_ (rax, 192); dump();
and_ (rdx, 0x1234); dump();
and_ (r12, 0x1234); dump();
and_ (rax, 0x1234); dump();
and_ (esi, 12345678); dump();
and_ (ecx, 4); dump();
and_ (ebp, -30); dump();
and_ (eax, 12345678); dump();
and_ (eax, 4); dump();
and_ (eax, -30); dump();
and_ (r11d, 12345678); dump();
and_ (r14d, 4); dump();
and_ (r11d, -30); dump();
and_ (sp, 4); dump();
and_ (cx, -30); dump();
and_ (bp, 1000); dump();
and_ (cx, -1000); dump();
and_ (ax, 4); dump();
and_ (ax, -30); dump();
and_ (ax, 1000); dump();
and_ (ax, -1000); dump();
and_ (r14w, 4); dump();
and_ (r14w, -30); dump();
and_ (r11w, 1000); dump();
and_ (r9w, -1000); dump();
and_ (cl, -30); dump();
and_ (cl, 4); dump();
and_ (al, 0xda); dump();
and_ (al, -30); dump();
and_ (al, 4); dump();
and_ (al, 0xda); dump();
and_ (r12b, -30); dump();
and_ (r12b, 4); dump();
and_ (r11b, 0xda); dump();
and_ (bpl, -30); dump();
and_ (spl, 4); dump();
and_ (sil, 0xda); dump();
cmp (edi, ptr[eax+ecx+3]); dump();
cmp (edi, ebx); dump();
cmp (ecx, eax); dump();
cmp (ecx, ptr[rdx+r15+0x12]); dump();
cmp (edx, r10d); dump();
cmp (eax, ptr[eax+ecx+3]); dump();
cmp (eax, ebx); dump();
cmp (eax, eax); dump();
cmp (eax, ptr[rdx+r15+0x12]); dump();
cmp (eax, r8d); dump();
cmp (r15d, ptr[eax+ecx+3]); dump();
cmp (r15d, ebx); dump();
cmp (r15d, eax); dump();
cmp (r11d, ptr[rdx+r15+0x12]); dump();
cmp (r14d, r13d); dump();
cmp (rbx, ptr[eax+ecx+3]); dump();
cmp (rbp, ptr[rdx+r15+0x12]); dump();
cmp (rdi, rsp); dump();
cmp (rsp, r12); dump();
cmp (rcx, rax); dump();
cmp (r14, ptr[eax+ecx+3]); dump();
cmp (r8, ptr[rdx+r15+0x12]); dump();
cmp (r9, rcx); dump();
cmp (r14, r13); dump();
cmp (r14, rax); dump();
cmp (rax, ptr[eax+ecx+3]); dump();
cmp (rax, ptr[rdx+r15+0x12]); dump();
cmp (rax, rdi); dump();
cmp (rax, r15); dump();
cmp (rax, rax); dump();
cmp (si, ptr[eax+ecx+3]); dump();
cmp (cx, cx); dump();
cmp (bx, ax); dump();
cmp (sp, ptr[rdx+r15+0x12]); dump();
cmp (cx, r8w); dump();
cmp (ax, ptr[eax+ecx+3]); dump();
cmp (ax, cx); dump();
cmp (ax, ax); dump();
cmp (ax, ptr[rdx+r15+0x12]); dump();
cmp (ax, r12w); dump();
cmp (r12w, ptr[eax+ecx+3]); dump();
cmp (r8w, sp); dump();
cmp (r12w, ax); dump();
cmp (r15w, ptr[rdx+r15+0x12]); dump();
cmp (r12w, r8w); dump();
cmp (al, ptr[eax+ecx+3]); dump();
cmp (cl, dl); dump();
cmp (cl, al); dump();
cmp (cl, ptr[rdx+r15+0x12]); dump();
cmp (al, r12b); dump();
cmp (al, ptr[eax+ecx+3]); dump();
cmp (al, cl); dump();
cmp (al, al); dump();
cmp (al, ptr[rdx+r15+0x12]); dump();
cmp (al, r12b); dump();
cmp (r13b, ptr[eax+ecx+3]); dump();
cmp (r11b, bl); dump();
cmp (r8b, al); dump();
cmp (r8b, ptr[rdx+r15+0x12]); dump();
cmp (r14b, r13b); dump();
cmp (spl, ptr[eax+ecx+3]); dump();
cmp (sil, al); dump();
cmp (bpl, al); dump();
cmp (sil, ptr[rdx+r15+0x12]); dump();
cmp (dil, r12b); dump();
cmp (ptr[eax+ecx+3], edi); dump();
cmp (ptr[eax+ecx+3], eax); dump();
cmp (ptr[eax+ecx+3], cl); dump();
cmp (ptr[eax+ecx+3], bp); dump();
cmp (ptr[eax+ecx+3], ax); dump();
cmp (ptr[eax+ecx+3], al); dump();
cmp (ptr[eax+ecx+3], r11d); dump();
cmp (ptr[eax+ecx+3], r13w); dump();
cmp (ptr[eax+ecx+3], r10b); dump();
cmp (ptr[eax+ecx+3], bpl); dump();
cmp (ptr[eax+ecx+3], rsp); dump();
cmp (ptr[eax+ecx+3], r8); dump();
cmp (ptr[eax+ecx+3], rax); dump();
cmp (ptr[rdx+r15+0x12], ecx); dump();
cmp (ptr[rdx+r15+0x12], eax); dump();
cmp (ptr[rdx+r15+0x12], cl); dump();
cmp (ptr[rdx+r15+0x12], cx); dump();
cmp (ptr[rdx+r15+0x12], ax); dump();
cmp (ptr[rdx+r15+0x12], al); dump();
cmp (ptr[rdx+r15+0x12], r13d); dump();
cmp (ptr[rdx+r15+0x12], r13w); dump();
cmp (ptr[rdx+r15+0x12], r13b); dump();
cmp (ptr[rdx+r15+0x12], dil); dump();
cmp (ptr[rdx+r15+0x12], rcx); dump();
cmp (ptr[rdx+r15+0x12], r13); dump();
cmp (ptr[rdx+r15+0x12], rax); dump();
cmp (byte [eax+edx], 4); dump();
cmp (byte [eax+edx], -30); dump();
cmp (word [esi], 4); dump();
cmp (word [esi], -30); dump();
cmp (word [esi], 1000); dump();
cmp (word [esi], -1000); dump();
cmp (dword [ebp*2], 12345678); dump();
cmp (dword [ebp*2], 4); dump();
cmp (dword [ebp*2], -30); dump();
cmp (dword [ebp*2], -100000); dump();
cmp (rsi, 4); dump();
cmp (rsp, -30); dump();
cmp (r8, 4); dump();
cmp (r11, -30); dump();
cmp (rax, 4); dump();
cmp (rax, -30); dump();
cmp (rcx, 0x12345678); dump();
cmp (r14, 0x12345678); dump();
cmp (rax, 0x12345678); dump();
cmp (rsi, 192); dump();
cmp (r14, 192); dump();
cmp (rax, 192); dump();
cmp (rbx, 0x1234); dump();
cmp (r11, 0x1234); dump();
cmp (rax, 0x1234); dump();
cmp (ecx, 12345678); dump();
cmp (esp, 4); dump();
cmp (ebp, -30); dump();
cmp (eax, 12345678); dump();
cmp (eax, 4); dump();
cmp (eax, -30); dump();
cmp (r11d, 12345678); dump();
cmp (r12d, 4); dump();
cmp (r13d, -30); dump();
cmp (bp, 4); dump();
cmp (di, -30); dump();
cmp (di, 1000); dump();
cmp (cx, -1000); dump();
cmp (ax, 4); dump();
cmp (ax, -30); dump();
cmp (ax, 1000); dump();
cmp (ax, -1000); dump();
cmp (r14w, 4); dump();
cmp (r14w, -30); dump();
cmp (r10w, 1000); dump();
cmp (r8w, -1000); dump();
cmp (cl, -30); dump();
cmp (bl, 4); dump();
cmp (cl, 0xda); dump();
cmp (al, -30); dump();
cmp (al, 4); dump();
cmp (al, 0xda); dump();
cmp (r8b, -30); dump();
cmp (r8b, 4); dump();
cmp (r10b, 0xda); dump();
cmp (spl, -30); dump();
cmp (spl, 4); dump();
cmp (dil, 0xda); dump();
or_ (ecx, ptr[eax+ecx+3]); dump();
or_ (ecx, edx); dump();
or_ (edi, eax); dump();
or_ (edx, ptr[rdx+r15+0x12]); dump();
or_ (ebx, r11d); dump();
or_ (eax, ptr[eax+ecx+3]); dump();
or_ (eax, esi); dump();
or_ (eax, eax); dump();
or_ (eax, ptr[rdx+r15+0x12]); dump();
or_ (eax, r9d); dump();
or_ (r15d, ptr[eax+ecx+3]); dump();
or_ (r8d, ecx); dump();
or_ (r13d, eax); dump();
or_ (r11d, ptr[rdx+r15+0x12]); dump();
or_ (r9d, r8d); dump();
or_ (rdx, ptr[eax+ecx+3]); dump();
or_ (rsp, ptr[rdx+r15+0x12]); dump();
or_ (rdx, rbx); dump();
or_ (rcx, r10); dump();
or_ (rdi, rax); dump();
or_ (r14, ptr[eax+ecx+3]); dump();
or_ (r15, ptr[rdx+r15+0x12]); dump();
or_ (r8, rdx); dump();
or_ (r10, r9); dump();
or_ (r10, rax); dump();
or_ (rax, ptr[eax+ecx+3]); dump();
or_ (rax, ptr[rdx+r15+0x12]); dump();
or_ (rax, rsp); dump();
or_ (rax, r11); dump();
or_ (rax, rax); dump();
or_ (bx, ptr[eax+ecx+3]); dump();
or_ (bp, di); dump();
or_ (cx, ax); dump();
or_ (cx, ptr[rdx+r15+0x12]); dump();
or_ (cx, r13w); dump();
or_ (ax, ptr[eax+ecx+3]); dump();
or_ (ax, cx); dump();
or_ (ax, ax); dump();
or_ (ax, ptr[rdx+r15+0x12]); dump();
or_ (ax, r8w); dump();
or_ (r15w, ptr[eax+ecx+3]); dump();
or_ (r8w, sp); dump();
or_ (r13w, ax); dump();
or_ (r15w, ptr[rdx+r15+0x12]); dump();
or_ (r9w, r8w); dump();
or_ (bl, ptr[eax+ecx+3]); dump();
or_ (al, bl); dump();
or_ (cl, al); dump();
or_ (cl, ptr[rdx+r15+0x12]); dump();
or_ (al, r10b); dump();
or_ (al, ptr[eax+ecx+3]); dump();
or_ (al, al); dump();
or_ (al, al); dump();
or_ (al, ptr[rdx+r15+0x12]); dump();
or_ (al, r15b); dump();
or_ (r15b, ptr[eax+ecx+3]); dump();
or_ (r12b, dl); dump();
or_ (r13b, al); dump();
or_ (r11b, ptr[rdx+r15+0x12]); dump();
or_ (r9b, r11b); dump();
or_ (bpl, ptr[eax+ecx+3]); dump();
or_ (bpl, cl); dump();
or_ (spl, al); dump();
or_ (sil, ptr[rdx+r15+0x12]); dump();
or_ (sil, r15b); dump();
or_ (ptr[eax+ecx+3], edi); dump();
or_ (ptr[eax+ecx+3], eax); dump();
or_ (ptr[eax+ecx+3], cl); dump();
or_ (ptr[eax+ecx+3], cx); dump();
or_ (ptr[eax+ecx+3], ax); dump();
or_ (ptr[eax+ecx+3], al); dump();
or_ (ptr[eax+ecx+3], r10d); dump();
or_ (ptr[eax+ecx+3], r9w); dump();
or_ (ptr[eax+ecx+3], r12b); dump();
or_ (ptr[eax+ecx+3], spl); dump();
or_ (ptr[eax+ecx+3], rbx); dump();
or_ (ptr[eax+ecx+3], r13); dump();
or_ (ptr[eax+ecx+3], rax); dump();
or_ (ptr[rdx+r15+0x12], esp); dump();
or_ (ptr[rdx+r15+0x12], eax); dump();
or_ (ptr[rdx+r15+0x12], cl); dump();
or_ (ptr[rdx+r15+0x12], bx); dump();
or_ (ptr[rdx+r15+0x12], ax); dump();
or_ (ptr[rdx+r15+0x12], al); dump();
or_ (ptr[rdx+r15+0x12], r8d); dump();
or_ (ptr[rdx+r15+0x12], r12w); dump();
or_ (ptr[rdx+r15+0x12], r9b); dump();
or_ (ptr[rdx+r15+0x12], sil); dump();
or_ (ptr[rdx+r15+0x12], rdx); dump();
or_ (ptr[rdx+r15+0x12], r11); dump();
or_ (ptr[rdx+r15+0x12], rax); dump();
or_ (byte [eax+edx], 4); dump();
or_ (byte [eax+edx], -30); dump();
or_ (word [esi], 4); dump();
or_ (word [esi], -30); dump();
or_ (word [esi], 1000); dump();
or_ (word [esi], -1000); dump();
or_ (dword [ebp*2], 12345678); dump();
or_ (dword [ebp*2], 4); dump();
or_ (dword [ebp*2], -30); dump();
or_ (dword [ebp*2], -100000); dump();
or_ (rsp, 4); dump();
or_ (rdi, -30); dump();
or_ (r10, 4); dump();
or_ (r10, -30); dump();
or_ (rax, 4); dump();
or_ (rax, -30); dump();
or_ (rsi, 0x12345678); dump();
or_ (r9, 0x12345678); dump();
or_ (rax, 0x12345678); dump();
or_ (rsi, 192); dump();
or_ (r11, 192); dump();
or_ (rax, 192); dump();
or_ (rsi, 0x1234); dump();
or_ (r9, 0x1234); dump();
or_ (rax, 0x1234); dump();
or_ (esi, 12345678); dump();
or_ (ecx, 4); dump();
or_ (edi, -30); dump();
or_ (eax, 12345678); dump();
or_ (eax, 4); dump();
or_ (eax, -30); dump();
or_ (r12d, 12345678); dump();
or_ (r12d, 4); dump();
or_ (r9d, -30); dump();
or_ (cx, 4); dump();
or_ (si, -30); dump();
or_ (sp, 1000); dump();
or_ (si, -1000); dump();
or_ (ax, 4); dump();
or_ (ax, -30); dump();
or_ (ax, 1000); dump();
or_ (ax, -1000); dump();
or_ (r9w, 4); dump();
or_ (r9w, -30); dump();
or_ (r14w, 1000); dump();
or_ (r10w, -1000); dump();
or_ (dl, -30); dump();
or_ (al, 4); dump();
or_ (dl, 0xda); dump();
or_ (al, -30); dump();
or_ (al, 4); dump();
or_ (al, 0xda); dump();
or_ (r15b, -30); dump();
or_ (r8b, 4); dump();
or_ (r14b, 0xda); dump();
or_ (dil, -30); dump();
or_ (sil, 4); dump();
or_ (bpl, 0xda); dump();
sbb (esi, ptr[eax+ecx+3]); dump();
sbb (esi, ebp); dump();
sbb (ebx, eax); dump();
sbb (ecx, ptr[rdx+r15+0x12]); dump();
sbb (esi, r11d); dump();
sbb (eax, ptr[eax+ecx+3]); dump();
sbb (eax, esi); dump();
sbb (eax, eax); dump();
sbb (eax, ptr[rdx+r15+0x12]); dump();
sbb (eax, r15d); dump();
sbb (r11d, ptr[eax+ecx+3]); dump();
sbb (r14d, ecx); dump();
sbb (r8d, eax); dump();
sbb (r15d, ptr[rdx+r15+0x12]); dump();
sbb (r15d, r15d); dump();
sbb (rbx, ptr[eax+ecx+3]); dump();
sbb (rcx, ptr[rdx+r15+0x12]); dump();
sbb (rcx, rsp); dump();
sbb (rdi, r8); dump();
sbb (rcx, rax); dump();
sbb (r12, ptr[eax+ecx+3]); dump();
sbb (r12, ptr[rdx+r15+0x12]); dump();
sbb (r9, rcx); dump();
sbb (r15, r8); dump();
sbb (r13, rax); dump();
sbb (rax, ptr[eax+ecx+3]); dump();
sbb (rax, ptr[rdx+r15+0x12]); dump();
sbb (rax, rbx); dump();
sbb (rax, r13); dump();
sbb (rax, rax); dump();
sbb (bp, ptr[eax+ecx+3]); dump();
sbb (sp, bx); dump();
sbb (bx, ax); dump();
sbb (bp, ptr[rdx+r15+0x12]); dump();
sbb (si, r11w); dump();
sbb (ax, ptr[eax+ecx+3]); dump();
sbb (ax, sp); dump();
sbb (ax, ax); dump();
sbb (ax, ptr[rdx+r15+0x12]); dump();
sbb (ax, r15w); dump();
sbb (r8w, ptr[eax+ecx+3]); dump();
sbb (r12w, bx); dump();
sbb (r14w, ax); dump();
sbb (r12w, ptr[rdx+r15+0x12]); dump();
sbb (r14w, r14w); dump();
sbb (al, ptr[eax+ecx+3]); dump();
sbb (al, bl); dump();
sbb (dl, al); dump();
sbb (al, ptr[rdx+r15+0x12]); dump();
sbb (cl, r8b); dump();
sbb (al, ptr[eax+ecx+3]); dump();
sbb (al, cl); dump();
sbb (al, al); dump();
sbb (al, ptr[rdx+r15+0x12]); dump();
sbb (al, r9b); dump();
sbb (r14b, ptr[eax+ecx+3]); dump();
sbb (r12b, al); dump();
sbb (r11b, al); dump();
sbb (r11b, ptr[rdx+r15+0x12]); dump();
sbb (r14b, r15b); dump();
sbb (spl, ptr[eax+ecx+3]); dump();
sbb (spl, bl); dump();
sbb (sil, al); dump();
sbb (sil, ptr[rdx+r15+0x12]); dump();
sbb (bpl, r14b); dump();
sbb (ptr[eax+ecx+3], esi); dump();
sbb (ptr[eax+ecx+3], eax); dump();
sbb (ptr[eax+ecx+3], al); dump();
sbb (ptr[eax+ecx+3], cx); dump();
sbb (ptr[eax+ecx+3], ax); dump();
sbb (ptr[eax+ecx+3], al); dump();
sbb (ptr[eax+ecx+3], r12d); dump();
sbb (ptr[eax+ecx+3], r11w); dump();
sbb (ptr[eax+ecx+3], r12b); dump();
sbb (ptr[eax+ecx+3], sil); dump();
sbb (ptr[eax+ecx+3], rdi); dump();
sbb (ptr[eax+ecx+3], r11); dump();
sbb (ptr[eax+ecx+3], rax); dump();
sbb (ptr[rdx+r15+0x12], edi); dump();
sbb (ptr[rdx+r15+0x12], eax); dump();
sbb (ptr[rdx+r15+0x12], bl); dump();
sbb (ptr[rdx+r15+0x12], dx); dump();
sbb (ptr[rdx+r15+0x12], ax); dump();
sbb (ptr[rdx+r15+0x12], al); dump();
sbb (ptr[rdx+r15+0x12], r8d); dump();
sbb (ptr[rdx+r15+0x12], r8w); dump();
sbb (ptr[rdx+r15+0x12], r12b); dump();
sbb (ptr[rdx+r15+0x12], spl); dump();
sbb (ptr[rdx+r15+0x12], rcx); dump();
sbb (ptr[rdx+r15+0x12], r15); dump();
sbb (ptr[rdx+r15+0x12], rax); dump();
sbb (byte [eax+edx], 4); dump();
sbb (byte [eax+edx], -30); dump();
sbb (word [esi], 4); dump();
sbb (word [esi], -30); dump();
sbb (word [esi], 1000); dump();
sbb (word [esi], -1000); dump();
sbb (dword [ebp*2], 12345678); dump();
sbb (dword [ebp*2], 4); dump();
sbb (dword [ebp*2], -30); dump();
sbb (dword [ebp*2], -100000); dump();
sbb (rbx, 4); dump();
sbb (rsi, -30); dump();
sbb (r8, 4); dump();
sbb (r14, -30); dump();
sbb (rax, 4); dump();
sbb (rax, -30); dump();
sbb (rsp, 0x12345678); dump();
sbb (r14, 0x12345678); dump();
sbb (rax, 0x12345678); dump();
sbb (rsp, 192); dump();
sbb (r11, 192); dump();
sbb (rax, 192); dump();
sbb (rdx, 0x1234); dump();
sbb (r9, 0x1234); dump();
sbb (rax, 0x1234); dump();
sbb (ecx, 12345678); dump();
sbb (ebx, 4); dump();
sbb (ecx, -30); dump();
sbb (eax, 12345678); dump();
sbb (eax, 4); dump();
sbb (eax, -30); dump();
sbb (r9d, 12345678); dump();
sbb (r13d, 4); dump();
sbb (r13d, -30); dump();
sbb (bp, 4); dump();
sbb (dx, -30); dump();
sbb (cx, 1000); dump();
sbb (bp, -1000); dump();
sbb (ax, 4); dump();
sbb (ax, -30); dump();
sbb (ax, 1000); dump();
sbb (ax, -1000); dump();
sbb (r15w, 4); dump();
sbb (r9w, -30); dump();
sbb (r14w, 1000); dump();
sbb (r14w, -1000); dump();
sbb (bl, -30); dump();
sbb (bl, 4); dump();
sbb (dl, 0xda); dump();
sbb (al, -30); dump();
sbb (al, 4); dump();
sbb (al, 0xda); dump();
sbb (r14b, -30); dump();
sbb (r10b, 4); dump();
sbb (r8b, 0xda); dump();
sbb (spl, -30); dump();
sbb (sil, 4); dump();
sbb (bpl, 0xda); dump();
sub (ecx, ptr[eax+ecx+3]); dump();
sub (edi, edi); dump();
sub (edx, eax); dump();
sub (ecx, ptr[rdx+r15+0x12]); dump();
sub (edx, r9d); dump();
sub (eax, ptr[eax+ecx+3]); dump();
sub (eax, edx); dump();
sub (eax, eax); dump();
sub (eax, ptr[rdx+r15+0x12]); dump();
sub (eax, r10d); dump();
sub (r9d, ptr[eax+ecx+3]); dump();
sub (r8d, edx); dump();
sub (r14d, eax); dump();
sub (r12d, ptr[rdx+r15+0x12]); dump();
sub (r11d, r13d); dump();
sub (rcx, ptr[eax+ecx+3]); dump();
sub (rdi, ptr[rdx+r15+0x12]); dump();
sub (rcx, rcx); dump();
sub (rcx, r13); dump();
sub (rsi, rax); dump();
sub (r14, ptr[eax+ecx+3]); dump();
sub (r9, ptr[rdx+r15+0x12]); dump();
sub (r15, rdi); dump();
sub (r11, r10); dump();
sub (r12, rax); dump();
sub (rax, ptr[eax+ecx+3]); dump();
sub (rax, ptr[rdx+r15+0x12]); dump();
sub (rax, rdx); dump();
sub (rax, r10); dump();
sub (rax, rax); dump();
sub (cx, ptr[eax+ecx+3]); dump();
sub (dx, di); dump();
sub (cx, ax); dump();
sub (bp, ptr[rdx+r15+0x12]); dump();
sub (bp, r9w); dump();
sub (ax, ptr[eax+ecx+3]); dump();
sub (ax, si); dump();
sub (ax, ax); dump();
sub (ax, ptr[rdx+r15+0x12]); dump();
sub (ax, r14w); dump();
sub (r15w, ptr[eax+ecx+3]); dump();
sub (r10w, cx); dump();
sub (r10w, ax); dump();
sub (r8w, ptr[rdx+r15+0x12]); dump();
sub (r11w, r13w); dump();
sub (cl, ptr[eax+ecx+3]); dump();
sub (cl, cl); dump();
sub (bl, al); dump();
sub (cl, ptr[rdx+r15+0x12]); dump();
sub (cl, r12b); dump();
sub (al, ptr[eax+ecx+3]); dump();
sub (al, al); dump();
sub (al, al); dump();
sub (al, ptr[rdx+r15+0x12]); dump();
sub (al, r10b); dump();
sub (r12b, ptr[eax+ecx+3]); dump();
sub (r9b, dl); dump();
sub (r10b, al); dump();
sub (r13b, ptr[rdx+r15+0x12]); dump();
sub (r8b, r14b); dump();
sub (bpl, ptr[eax+ecx+3]); dump();
sub (dil, cl); dump();
sub (spl, al); dump();
sub (dil, ptr[rdx+r15+0x12]); dump();
sub (dil, r9b); dump();
sub (ptr[eax+ecx+3], ebx); dump();
sub (ptr[eax+ecx+3], eax); dump();
sub (ptr[eax+ecx+3], cl); dump();
sub (ptr[eax+ecx+3], cx); dump();
sub (ptr[eax+ecx+3], ax); dump();
sub (ptr[eax+ecx+3], al); dump();
sub (ptr[eax+ecx+3], r15d); dump();
sub (ptr[eax+ecx+3], r12w); dump();
sub (ptr[eax+ecx+3], r9b); dump();
sub (ptr[eax+ecx+3], sil); dump();
sub (ptr[eax+ecx+3], rcx); dump();
sub (ptr[eax+ecx+3], r15); dump();
sub (ptr[eax+ecx+3], rax); dump();
sub (ptr[rdx+r15+0x12], esp); dump();
sub (ptr[rdx+r15+0x12], eax); dump();
sub (ptr[rdx+r15+0x12], bl); dump();
sub (ptr[rdx+r15+0x12], dx); dump();
sub (ptr[rdx+r15+0x12], ax); dump();
sub (ptr[rdx+r15+0x12], al); dump();
sub (ptr[rdx+r15+0x12], r10d); dump();
sub (ptr[rdx+r15+0x12], r13w); dump();
sub (ptr[rdx+r15+0x12], r12b); dump();
sub (ptr[rdx+r15+0x12], spl); dump();
sub (ptr[rdx+r15+0x12], rdi); dump();
sub (ptr[rdx+r15+0x12], r10); dump();
sub (ptr[rdx+r15+0x12], rax); dump();
sub (byte [eax+edx], 4); dump();
sub (byte [eax+edx], -30); dump();
sub (word [esi], 4); dump();
sub (word [esi], -30); dump();
sub (word [esi], 1000); dump();
sub (word [esi], -1000); dump();
sub (dword [ebp*2], 12345678); dump();
sub (dword [ebp*2], 4); dump();
sub (dword [ebp*2], -30); dump();
sub (dword [ebp*2], -100000); dump();
sub (rsp, 4); dump();
sub (rbp, -30); dump();
sub (r12, 4); dump();
sub (r13, -30); dump();
sub (rax, 4); dump();
sub (rax, -30); dump();
sub (rbp, 0x12345678); dump();
sub (r14, 0x12345678); dump();
sub (rax, 0x12345678); dump();
sub (rsi, 192); dump();
sub (r12, 192); dump();
sub (rax, 192); dump();
sub (rdi, 0x1234); dump();
sub (r11, 0x1234); dump();
sub (rax, 0x1234); dump();
sub (ebx, 12345678); dump();
sub (ebx, 4); dump();
sub (ecx, -30); dump();
sub (eax, 12345678); dump();
sub (eax, 4); dump();
sub (eax, -30); dump();
sub (r13d, 12345678); dump();
sub (r15d, 4); dump();
sub (r12d, -30); dump();
sub (dx, 4); dump();
sub (si, -30); dump();
sub (bx, 1000); dump();
sub (di, -1000); dump();
sub (ax, 4); dump();
sub (ax, -30); dump();
sub (ax, 1000); dump();
sub (ax, -1000); dump();
sub (r11w, 4); dump();
sub (r10w, -30); dump();
sub (r15w, 1000); dump();
sub (r10w, -1000); dump();
sub (cl, -30); dump();
sub (cl, 4); dump();
sub (al, 0xda); dump();
sub (al, -30); dump();
sub (al, 4); dump();
sub (al, 0xda); dump();
sub (r13b, -30); dump();
sub (r8b, 4); dump();
sub (r8b, 0xda); dump();
sub (sil, -30); dump();
sub (bpl, 4); dump();
sub (bpl, 0xda); dump();
xor_ (esi, ptr[eax+ecx+3]); dump();
xor_ (ecx, esi); dump();
xor_ (ecx, eax); dump();
xor_ (esp, ptr[rdx+r15+0x12]); dump();
xor_ (edi, r8d); dump();
xor_ (eax, ptr[eax+ecx+3]); dump();
xor_ (eax, edi); dump();
xor_ (eax, eax); dump();
xor_ (eax, ptr[rdx+r15+0x12]); dump();
xor_ (eax, r13d); dump();
xor_ (r10d, ptr[eax+ecx+3]); dump();
xor_ (r8d, edx); dump();
xor_ (r11d, eax); dump();
xor_ (r14d, ptr[rdx+r15+0x12]); dump();
xor_ (r11d, r12d); dump();
xor_ (rcx, ptr[eax+ecx+3]); dump();
xor_ (rbx, ptr[rdx+r15+0x12]); dump();
xor_ (rsp, rdx); dump();
xor_ (rcx, r13); dump();
xor_ (rsi, rax); dump();
xor_ (r13, ptr[eax+ecx+3]); dump();
xor_ (r12, ptr[rdx+r15+0x12]); dump();
xor_ (r12, rbp); dump();
xor_ (r15, r14); dump();
xor_ (r10, rax); dump();
xor_ (rax, ptr[eax+ecx+3]); dump();
xor_ (rax, ptr[rdx+r15+0x12]); dump();
xor_ (rax, rdx); dump();
xor_ (rax, r10); dump();
xor_ (rax, rax); dump();
xor_ (di, ptr[eax+ecx+3]); dump();
xor_ (si, cx); dump();
xor_ (si, ax); dump();
xor_ (bx, ptr[rdx+r15+0x12]); dump();
xor_ (sp, r13w); dump();
xor_ (ax, ptr[eax+ecx+3]); dump();
xor_ (ax, sp); dump();
xor_ (ax, ax); dump();
xor_ (ax, ptr[rdx+r15+0x12]); dump();
xor_ (ax, r8w); dump();
xor_ (r14w, ptr[eax+ecx+3]); dump();
xor_ (r12w, bp); dump();
xor_ (r10w, ax); dump();
xor_ (r13w, ptr[rdx+r15+0x12]); dump();
xor_ (r15w, r9w); dump();
xor_ (bl, ptr[eax+ecx+3]); dump();
xor_ (bl, dl); dump();
xor_ (cl, al); dump();
xor_ (al, ptr[rdx+r15+0x12]); dump();
xor_ (cl, r13b); dump();
xor_ (al, ptr[eax+ecx+3]); dump();
xor_ (al, cl); dump();
xor_ (al, al); dump();
xor_ (al, ptr[rdx+r15+0x12]); dump();
xor_ (al, r14b); dump();
xor_ (r14b, ptr[eax+ecx+3]); dump();
xor_ (r8b, dl); dump();
xor_ (r13b, al); dump();
xor_ (r14b, ptr[rdx+r15+0x12]); dump();
xor_ (r14b, r13b); dump();
xor_ (sil, ptr[eax+ecx+3]); dump();
xor_ (dil, bl); dump();
xor_ (bpl, al); dump();
xor_ (sil, ptr[rdx+r15+0x12]); dump();
xor_ (dil, r10b); dump();
xor_ (ptr[eax+ecx+3], esi); dump();
xor_ (ptr[eax+ecx+3], eax); dump();
xor_ (ptr[eax+ecx+3], al); dump();
xor_ (ptr[eax+ecx+3], dx); dump();
xor_ (ptr[eax+ecx+3], ax); dump();
xor_ (ptr[eax+ecx+3], al); dump();
xor_ (ptr[eax+ecx+3], r13d); dump();
xor_ (ptr[eax+ecx+3], r15w); dump();
xor_ (ptr[eax+ecx+3], r15b); dump();
xor_ (ptr[eax+ecx+3], bpl); dump();
xor_ (ptr[eax+ecx+3], rdx); dump();
xor_ (ptr[eax+ecx+3], r13); dump();
xor_ (ptr[eax+ecx+3], rax); dump();
xor_ (ptr[rdx+r15+0x12], ebp); dump();
xor_ (ptr[rdx+r15+0x12], eax); dump();
xor_ (ptr[rdx+r15+0x12], dl); dump();
xor_ (ptr[rdx+r15+0x12], cx); dump();
xor_ (ptr[rdx+r15+0x12], ax); dump();
xor_ (ptr[rdx+r15+0x12], al); dump();
xor_ (ptr[rdx+r15+0x12], r10d); dump();
xor_ (ptr[rdx+r15+0x12], r13w); dump();
xor_ (ptr[rdx+r15+0x12], r8b); dump();
xor_ (ptr[rdx+r15+0x12], bpl); dump();
xor_ (ptr[rdx+r15+0x12], rbx); dump();
xor_ (ptr[rdx+r15+0x12], r12); dump();
xor_ (ptr[rdx+r15+0x12], rax); dump();
xor_ (byte [eax+edx], 4); dump();
xor_ (byte [eax+edx], -30); dump();
xor_ (word [esi], 4); dump();
xor_ (word [esi], -30); dump();
xor_ (word [esi], 1000); dump();
xor_ (word [esi], -1000); dump();
xor_ (dword [ebp*2], 12345678); dump();
xor_ (dword [ebp*2], 4); dump();
xor_ (dword [ebp*2], -30); dump();
xor_ (dword [ebp*2], -100000); dump();
xor_ (rdx, 4); dump();
xor_ (rbp, -30); dump();
xor_ (r12, 4); dump();
xor_ (r12, -30); dump();
xor_ (rax, 4); dump();
xor_ (rax, -30); dump();
xor_ (rdi, 0x12345678); dump();
xor_ (r9, 0x12345678); dump();
xor_ (rax, 0x12345678); dump();
xor_ (rcx, 192); dump();
xor_ (r10, 192); dump();
xor_ (rax, 192); dump();
xor_ (rcx, 0x1234); dump();
xor_ (r10, 0x1234); dump();
xor_ (rax, 0x1234); dump();
xor_ (edi, 12345678); dump();
xor_ (ecx, 4); dump();
xor_ (ecx, -30); dump();
xor_ (eax, 12345678); dump();
xor_ (eax, 4); dump();
xor_ (eax, -30); dump();
xor_ (r9d, 12345678); dump();
xor_ (r12d, 4); dump();
xor_ (r12d, -30); dump();
xor_ (cx, 4); dump();
xor_ (cx, -30); dump();
xor_ (bx, 1000); dump();
xor_ (bx, -1000); dump();
xor_ (ax, 4); dump();
xor_ (ax, -30); dump();
xor_ (ax, 1000); dump();
xor_ (ax, -1000); dump();
xor_ (r9w, 4); dump();
xor_ (r13w, -30); dump();
xor_ (r13w, 1000); dump();
xor_ (r11w, -1000); dump();
xor_ (bl, -30); dump();
xor_ (cl, 4); dump();
xor_ (cl, 0xda); dump();
xor_ (al, -30); dump();
xor_ (al, 4); dump();
xor_ (al, 0xda); dump();
xor_ (r12b, -30); dump();
xor_ (r8b, 4); dump();
xor_ (r11b, 0xda); dump();
xor_ (spl, -30); dump();
xor_ (spl, 4); dump();
xor_ (dil, 0xda); dump();
adcx (edi, ptr[eax+ecx+3]); dump();
adcx (ebp, edx); dump();
adcx (ebx, eax); dump();
adcx (edx, ptr[rdx+r15+0x12]); dump();
adcx (ebx, r8d); dump();
adcx (eax, ptr[eax+ecx+3]); dump();
adcx (eax, ecx); dump();
adcx (eax, eax); dump();
adcx (eax, ptr[rdx+r15+0x12]); dump();
adcx (eax, r12d); dump();
adcx (r15d, ptr[eax+ecx+3]); dump();
adcx (r15d, edx); dump();
adcx (r12d, eax); dump();
adcx (r14d, ptr[rdx+r15+0x12]); dump();
adcx (r15d, r15d); dump();
adcx (rsi, ptr[eax+ecx+3]); dump();
adcx (rdi, ptr[rdx+r15+0x12]); dump();
adcx (rdi, rdx); dump();
adcx (rbx, r13); dump();
adcx (rsp, rax); dump();
adcx (r12, ptr[eax+ecx+3]); dump();
adcx (r12, ptr[rdx+r15+0x12]); dump();
adcx (r12, rcx); dump();
adcx (r12, r12); dump();
adcx (r8, rax); dump();
adcx (rax, ptr[eax+ecx+3]); dump();
adcx (rax, ptr[rdx+r15+0x12]); dump();
adcx (rax, rbp); dump();
adcx (rax, r12); dump();
adcx (rax, rax); dump();
adox (ebp, ptr[eax+ecx+3]); dump();
adox (edi, ecx); dump();
adox (esi, eax); dump();
adox (ebx, ptr[rdx+r15+0x12]); dump();
adox (ecx, r13d); dump();
adox (eax, ptr[eax+ecx+3]); dump();
adox (eax, esi); dump();
adox (eax, eax); dump();
adox (eax, ptr[rdx+r15+0x12]); dump();
adox (eax, r10d); dump();
adox (r13d, ptr[eax+ecx+3]); dump();
adox (r8d, esi); dump();
adox (r15d, eax); dump();
adox (r9d, ptr[rdx+r15+0x12]); dump();
adox (r11d, r14d); dump();
adox (rcx, ptr[eax+ecx+3]); dump();
adox (rbp, ptr[rdx+r15+0x12]); dump();
adox (rdi, rdx); dump();
adox (rcx, r14); dump();
adox (rcx, rax); dump();
adox (r12, ptr[eax+ecx+3]); dump();
adox (r8, ptr[rdx+r15+0x12]); dump();
adox (r11, rcx); dump();
adox (r8, r12); dump();
adox (r13, rax); dump();
adox (rax, ptr[eax+ecx+3]); dump();
adox (rax, ptr[rdx+r15+0x12]); dump();
adox (rax, rbp); dump();
adox (rax, r13); dump();
adox (rax, rax); dump();
bt (ptr[eax+ecx+3], bp); dump();
bt (ptr[eax+ecx+3], ax); dump();
bt (ptr[eax+ecx+3], r13w); dump();
bt (di, di); dump();
bt (sp, ax); dump();
bt (bx, r13w); dump();
bt (ax, sp); dump();
bt (ax, ax); dump();
bt (ax, r8w); dump();
bt (ptr[rdx+r15+0x12], cx); dump();
bt (ptr[rdx+r15+0x12], ax); dump();
bt (ptr[rdx+r15+0x12], r12w); dump();
bt (r13w, si); dump();
bt (r9w, ax); dump();
bt (r10w, r14w); dump();
bt (ptr[eax+ecx+3], esi); dump();
bt (ptr[eax+ecx+3], eax); dump();
bt (ptr[eax+ecx+3], r15d); dump();
bt (ecx, edx); dump();
bt (ebp, eax); dump();
bt (esp, r14d); dump();
bt (eax, edi); dump();
bt (eax, eax); dump();
bt (eax, r14d); dump();
bt (ptr[rdx+r15+0x12], ebx); dump();
bt (ptr[rdx+r15+0x12], eax); dump();
bt (ptr[rdx+r15+0x12], r12d); dump();
bt (r10d, esi); dump();
bt (r9d, eax); dump();
bt (r11d, r10d); dump();
bt (ptr[eax+ecx+3], rcx); dump();
bt (ptr[eax+ecx+3], r15); dump();
bt (ptr[eax+ecx+3], rax); dump();
bt (ptr[rdx+r15+0x12], rsi); dump();
bt (ptr[rdx+r15+0x12], r8); dump();
bt (ptr[rdx+r15+0x12], rax); dump();
bt (rcx, rsi); dump();
bt (rbx, r9); dump();
bt (rbx, rax); dump();
bt (r13, rcx); dump();
bt (r14, r11); dump();
bt (r13, rax); dump();
bt (rax, rdi); dump();
bt (rax, r15); dump();
bt (rax, rax); dump();
bt (bx, 4); dump();
bt (bp, 0xda); dump();
bt (ax, 4); dump();
bt (ax, 0xda); dump();
bt (word [esi], 4); dump();
bt (word [esi], 0xda); dump();
bt (r11w, 4); dump();
bt (r11w, 0xda); dump();
bts (ptr[eax+ecx+3], sp); dump();
bts (ptr[eax+ecx+3], ax); dump();
bts (ptr[eax+ecx+3], r12w); dump();
bts (cx, di); dump();
bts (sp, ax); dump();
bts (si, r12w); dump();
bts (ax, bx); dump();
bts (ax, ax); dump();
bts (ax, r12w); dump();
bts (ptr[rdx+r15+0x12], dx); dump();
bts (ptr[rdx+r15+0x12], ax); dump();
bts (ptr[rdx+r15+0x12], r11w); dump();
bts (r15w, cx); dump();
bts (r10w, ax); dump();
bts (r8w, r11w); dump();
bts (ptr[eax+ecx+3], ecx); dump();
bts (ptr[eax+ecx+3], eax); dump();
bts (ptr[eax+ecx+3], r9d); dump();
bts (esp, esi); dump();
bts (ecx, eax); dump();
bts (edx, r13d); dump();
bts (eax, ebp); dump();
bts (eax, eax); dump();
bts (eax, r14d); dump();
bts (ptr[rdx+r15+0x12], edx); dump();
bts (ptr[rdx+r15+0x12], eax); dump();
bts (ptr[rdx+r15+0x12], r12d); dump();
bts (r9d, ebx); dump();
bts (r13d, eax); dump();
bts (r9d, r11d); dump();
bts (ptr[eax+ecx+3], rsp); dump();
bts (ptr[eax+ecx+3], r13); dump();
bts (ptr[eax+ecx+3], rax); dump();
bts (ptr[rdx+r15+0x12], rdi); dump();
bts (ptr[rdx+r15+0x12], r13); dump();
bts (ptr[rdx+r15+0x12], rax); dump();
bts (rcx, rsp); dump();
bts (rdi, r13); dump();
bts (rbp, rax); dump();
bts (r9, rcx); dump();
bts (r15, r15); dump();
bts (r8, rax); dump();
bts (rax, rcx); dump();
bts (rax, r15); dump();
bts (rax, rax); dump();
bts (sp, 4); dump();
bts (cx, 0xda); dump();
bts (ax, 4); dump();
bts (ax, 0xda); dump();
bts (word [esi], 4); dump();
bts (word [esi], 0xda); dump();
bts (r10w, 4); dump();
bts (r11w, 0xda); dump();
btr (ptr[eax+ecx+3], si); dump();
btr (ptr[eax+ecx+3], ax); dump();
btr (ptr[eax+ecx+3], r14w); dump();
btr (di, bp); dump();
btr (cx, ax); dump();
btr (sp, r8w); dump();
btr (ax, di); dump();
btr (ax, ax); dump();
btr (ax, r9w); dump();
btr (ptr[rdx+r15+0x12], cx); dump();
btr (ptr[rdx+r15+0x12], ax); dump();
btr (ptr[rdx+r15+0x12], r8w); dump();
btr (r15w, bx); dump();
btr (r15w, ax); dump();
btr (r12w, r8w); dump();
btr (ptr[eax+ecx+3], ebp); dump();
btr (ptr[eax+ecx+3], eax); dump();
btr (ptr[eax+ecx+3], r12d); dump();
btr (esp, esi); dump();
btr (edi, eax); dump();
btr (edi, r10d); dump();
btr (eax, ecx); dump();
btr (eax, eax); dump();
btr (eax, r9d); dump();
btr (ptr[rdx+r15+0x12], ebp); dump();
btr (ptr[rdx+r15+0x12], eax); dump();
btr (ptr[rdx+r15+0x12], r12d); dump();
btr (r14d, ecx); dump();
btr (r13d, eax); dump();
btr (r8d, r10d); dump();
btr (ptr[eax+ecx+3], rcx); dump();
btr (ptr[eax+ecx+3], r12); dump();
btr (ptr[eax+ecx+3], rax); dump();
btr (ptr[rdx+r15+0x12], rbx); dump();
btr (ptr[rdx+r15+0x12], r13); dump();
btr (ptr[rdx+r15+0x12], rax); dump();
btr (rsi, rdi); dump();
btr (rcx, r10); dump();
btr (rbp, rax); dump();
btr (r10, rsp); dump();
btr (r12, r8); dump();
btr (r11, rax); dump();
btr (rax, rcx); dump();
btr (rax, r11); dump();
btr (rax, rax); dump();
btr (sp, 4); dump();
btr (di, 0xda); dump();
btr (ax, 4); dump();
btr (ax, 0xda); dump();
btr (word [esi], 4); dump();
btr (word [esi], 0xda); dump();
btr (r13w, 4); dump();
btr (r8w, 0xda); dump();
btc (ptr[eax+ecx+3], bx); dump();
btc (ptr[eax+ecx+3], ax); dump();
btc (ptr[eax+ecx+3], r14w); dump();
btc (cx, cx); dump();
btc (sp, ax); dump();
btc (cx, r9w); dump();
btc (ax, si); dump();
btc (ax, ax); dump();
btc (ax, r10w); dump();
btc (ptr[rdx+r15+0x12], si); dump();
btc (ptr[rdx+r15+0x12], ax); dump();
btc (ptr[rdx+r15+0x12], r11w); dump();
btc (r15w, dx); dump();
btc (r11w, ax); dump();
btc (r13w, r9w); dump();
btc (ptr[eax+ecx+3], esp); dump();
btc (ptr[eax+ecx+3], eax); dump();
btc (ptr[eax+ecx+3], r10d); dump();
btc (esi, ecx); dump();
btc (ecx, eax); dump();
btc (ebp, r9d); dump();
btc (eax, edx); dump();
btc (eax, eax); dump();
btc (eax, r13d); dump();
btc (ptr[rdx+r15+0x12], ebx); dump();
btc (ptr[rdx+r15+0x12], eax); dump();
btc (ptr[rdx+r15+0x12], r11d); dump();
btc (r8d, esi); dump();
btc (r10d, eax); dump();
btc (r8d, r14d); dump();
btc (ptr[eax+ecx+3], rcx); dump();
btc (ptr[eax+ecx+3], r9); dump();
btc (ptr[eax+ecx+3], rax); dump();
btc (ptr[rdx+r15+0x12], rsp); dump();
btc (ptr[rdx+r15+0x12], r10); dump();
btc (ptr[rdx+r15+0x12], rax); dump();
btc (rbx, rbx); dump();
btc (rbp, r15); dump();
btc (rbp, rax); dump();
btc (r12, rcx); dump();
btc (r13, r13); dump();
btc (r15, rax); dump();
btc (rax, rsi); dump();
btc (rax, r14); dump();
btc (rax, rax); dump();
btc (bx, 4); dump();
btc (dx, 0xda); dump();
btc (ax, 4); dump();
btc (ax, 0xda); dump();
btc (word [esi], 4); dump();
btc (word [esi], 0xda); dump();
btc (r11w, 4); dump();
btc (r14w, 0xda); dump();
inc (esi); dump();
inc (eax); dump();
inc (bl); dump();
inc (cx); dump();
inc (ax); dump();
inc (al); dump();
inc (r13d); dump();
inc (r13w); dump();
inc (r9b); dump();
inc (bpl); dump();
inc (rsp); dump();
inc (r10); dump();
inc (rax); dump();
inc (byte [eax+edx]); dump();
inc (word [esi]); dump();
inc (dword [ebp*2]); dump();
dec (edi); dump();
dec (eax); dump();
dec (bl); dump();
dec (cx); dump();
dec (ax); dump();
dec (al); dump();
dec (r11d); dump();
dec (r9w); dump();
dec (r9b); dump();
dec (bpl); dump();
dec (rsp); dump();
dec (r13); dump();
dec (rax); dump();
dec (byte [eax+edx]); dump();
dec (word [esi]); dump();
dec (dword [ebp*2]); dump();
div (esi); dump();
div (eax); dump();
div (dl); dump();
div (bp); dump();
div (ax); dump();
div (al); dump();
div (r10d); dump();
div (r10w); dump();
div (r10b); dump();
div (dil); dump();
div (rbp); dump();
div (r8); dump();
div (rax); dump();
div (byte [eax+edx]); dump();
div (word [esi]); dump();
div (dword [ebp*2]); dump();
idiv (ebx); dump();
idiv (eax); dump();
idiv (bl); dump();
idiv (dx); dump();
idiv (ax); dump();
idiv (al); dump();
idiv (r8d); dump();
idiv (r10w); dump();
idiv (r8b); dump();
idiv (dil); dump();
idiv (rcx); dump();
idiv (r14); dump();
idiv (rax); dump();
idiv (byte [eax+edx]); dump();
idiv (word [esi]); dump();
idiv (dword [ebp*2]); dump();
imul (esp); dump();
imul (eax); dump();
imul (al); dump();
imul (bp); dump();
imul (ax); dump();
imul (al); dump();
imul (r12d); dump();
imul (r8w); dump();
imul (r12b); dump();
imul (spl); dump();
imul (rdi); dump();
imul (r15); dump();
imul (rax); dump();
imul (byte [eax+edx]); dump();
imul (word [esi]); dump();
imul (dword [ebp*2]); dump();
mul (edi); dump();
mul (eax); dump();
mul (cl); dump();
mul (dx); dump();
mul (ax); dump();
mul (al); dump();
mul (r11d); dump();
mul (r11w); dump();
mul (r9b); dump();
mul (spl); dump();
mul (rdx); dump();
mul (r8); dump();
mul (rax); dump();
mul (byte [eax+edx]); dump();
mul (word [esi]); dump();
mul (dword [ebp*2]); dump();
neg (ebp); dump();
neg (eax); dump();
neg (al); dump();
neg (bx); dump();
neg (ax); dump();
neg (al); dump();
neg (r8d); dump();
neg (r15w); dump();
neg (r8b); dump();
neg (sil); dump();
neg (rdi); dump();
neg (r13); dump();
neg (rax); dump();
neg (byte [eax+edx]); dump();
neg (word [esi]); dump();
neg (dword [ebp*2]); dump();
not_ (esi); dump();
not_ (eax); dump();
not_ (dl); dump();
not_ (bx); dump();
not_ (ax); dump();
not_ (al); dump();
not_ (r13d); dump();
not_ (r9w); dump();
not_ (r10b); dump();
not_ (dil); dump();
not_ (rbx); dump();
not_ (r8); dump();
not_ (rax); dump();
not_ (byte [eax+edx]); dump();
not_ (word [esi]); dump();
not_ (dword [ebp*2]); dump();
imul (dx, sp); dump();
imul (bp, ax); dump();
imul (bx, word [esi]); dump();
imul (dx, r10w); dump();
imul (ax, di); dump();
imul (ax, ax); dump();
imul (ax, word [esi]); dump();
imul (ax, r13w); dump();
imul (r9w, di); dump();
imul (r15w, ax); dump();
imul (r9w, word [esi]); dump();
imul (r13w, r9w); dump();
imul (ecx, ecx); dump();
imul (ebx, eax); dump();
imul (edi, dword [ebp*2]); dump();
imul (esi, r8d); dump();
imul (eax, ecx); dump();
imul (eax, eax); dump();
imul (eax, dword [ebp*2]); dump();
imul (eax, r12d); dump();
imul (r15d, ebp); dump();
imul (r10d, eax); dump();
imul (r12d, dword [ebp*2]); dump();
imul (r11d, r14d); dump();
imul (rbp, ptr[eax+ecx+3]); dump();
imul (rcx, ptr[rdx+r15+0x12]); dump();
imul (rbx, rbp); dump();
imul (rbp, r10); dump();
imul (rbp, rax); dump();
imul (r10, ptr[eax+ecx+3]); dump();
imul (r12, ptr[rdx+r15+0x12]); dump();
imul (r9, rdx); dump();
imul (r14, r9); dump();
imul (r15, rax); dump();
imul (rax, ptr[eax+ecx+3]); dump();
imul (rax, ptr[rdx+r15+0x12]); dump();
imul (rax, rdi); dump();
imul (rax, r10); dump();
imul (rax, rax); dump();
imul (cx, ptr[eax+ecx+3], 4); dump();
imul (cx, ptr[eax+ecx+3], 1000); dump();
imul (bp, bp, 4); dump();
imul (di, cx, 1000); dump();
imul (cx, ax, 4); dump();
imul (di, ax, 1000); dump();
imul (di, ptr[rdx+r15+0x12], 4); dump();
imul (cx, ptr[rdx+r15+0x12], 1000); dump();
imul (di, r11w, 4); dump();
imul (bx, r13w, 1000); dump();
imul (ax, ptr[eax+ecx+3], 4); dump();
imul (ax, ptr[eax+ecx+3], 1000); dump();
imul (ax, di, 4); dump();
imul (ax, bp, 1000); dump();
imul (ax, ax, 4); dump();
imul (ax, ax, 1000); dump();
imul (ax, ptr[rdx+r15+0x12], 4); dump();
imul (ax, ptr[rdx+r15+0x12], 1000); dump();
imul (ax, r11w, 4); dump();
imul (ax, r12w, 1000); dump();
imul (r14w, ptr[eax+ecx+3], 4); dump();
imul (r13w, ptr[eax+ecx+3], 1000); dump();
imul (r14w, dx, 4); dump();
imul (r8w, si, 1000); dump();
imul (r10w, ax, 4); dump();
imul (r14w, ax, 1000); dump();
imul (r15w, ptr[rdx+r15+0x12], 4); dump();
imul (r8w, ptr[rdx+r15+0x12], 1000); dump();
imul (r15w, r13w, 4); dump();
imul (r14w, r9w, 1000); dump();
imul (esp, ptr[eax+ecx+3], 12345678); dump();
imul (ebp, ptr[eax+ecx+3], 4); dump();
imul (ecx, ebx, 12345678); dump();
imul (esp, edx, 4); dump();
imul (ecx, eax, 12345678); dump();
imul (edi, eax, 4); dump();
imul (ebp, ptr[rdx+r15+0x12], 12345678); dump();
imul (edx, ptr[rdx+r15+0x12], 4); dump();
imul (esp, r11d, 12345678); dump();
imul (edi, r10d, 4); dump();
imul (eax, ptr[eax+ecx+3], 12345678); dump();
imul (eax, ptr[eax+ecx+3], 4); dump();
imul (eax, esi, 12345678); dump();
imul (eax, edx, 4); dump();
imul (eax, eax, 12345678); dump();
imul (eax, eax, 4); dump();
imul (eax, ptr[rdx+r15+0x12], 12345678); dump();
imul (eax, ptr[rdx+r15+0x12], 4); dump();
imul (eax, r11d, 12345678); dump();
imul (eax, r9d, 4); dump();
imul (r11d, ptr[eax+ecx+3], 12345678); dump();
imul (r14d, ptr[eax+ecx+3], 4); dump();
imul (r14d, esp, 12345678); dump();
imul (r8d, esi, 4); dump();
imul (r9d, eax, 12345678); dump();
imul (r14d, eax, 4); dump();
imul (r15d, ptr[rdx+r15+0x12], 12345678); dump();
imul (r8d, ptr[rdx+r15+0x12], 4); dump();
imul (r13d, r8d, 12345678); dump();
imul (r15d, r14d, 4); dump();
imul (rcx, ptr[eax+ecx+3], 12345678); dump();
imul (rbp, ptr[eax+ecx+3], 4); dump();
imul (rcx, ptr[rdx+r15+0x12], 12345678); dump();
imul (rcx, ptr[rdx+r15+0x12], 4); dump();
imul (rdi, rbp, 12345678); dump();
imul (rsi, rcx, 4); dump();
imul (rcx, r15, 12345678); dump();
imul (rbx, r13, 4); dump();
imul (rsi, rax, 12345678); dump();
imul (rdi, rax, 4); dump();
imul (r13, ptr[eax+ecx+3], 12345678); dump();
imul (r15, ptr[eax+ecx+3], 4); dump();
imul (r9, ptr[rdx+r15+0x12], 12345678); dump();
imul (r15, ptr[rdx+r15+0x12], 4); dump();
imul (r8, rcx, 12345678); dump();
imul (r10, rsp, 4); dump();
imul (r10, r11, 12345678); dump();
imul (r11, r11, 4); dump();
imul (r15, rax, 12345678); dump();
imul (r11, rax, 4); dump();
imul (rax, ptr[eax+ecx+3], 12345678); dump();
imul (rax, ptr[eax+ecx+3], 4); dump();
imul (rax, ptr[rdx+r15+0x12], 12345678); dump();
imul (rax, ptr[rdx+r15+0x12], 4); dump();
imul (rax, rdi, 12345678); dump();
imul (rax, rdx, 4); dump();
imul (rax, r12, 12345678); dump();
imul (rax, r13, 4); dump();
imul (rax, rax, 12345678); dump();
imul (rax, rax, 4); dump();
    }
    void gen1()
    {
push (12345678); dump();
push (4); dump();
push(word, 1000);dump();
push (dx); dump();
push (ax); dump();
push (word [esi]); dump();
push (r10w); dump();
pop (si); dump();
pop (ax); dump();
pop (word [esi]); dump();
pop (r14w); dump();
push (12345678); dump();
push (rbx); dump();
push (r11); dump();
push (rax); dump();
push (qword [eax+ecx*8]); dump();
pop (rsi); dump();
pop (r12); dump();
pop (rax); dump();
pop (qword [eax+ecx*8]); dump();
test (ptr[eax+ecx+3], edx); dump();
test (ptr[eax+ecx+3], eax); dump();
test (ptr[eax+ecx+3], r13d); dump();
test (esi, esp); dump();
test (ecx, eax); dump();
test (ebx, r15d); dump();
test (eax, esi); dump();
test (eax, eax); dump();
test (eax, r11d); dump();
test (ptr[rdx+r15+0x12], ecx); dump();
test (ptr[rdx+r15+0x12], eax); dump();
test (ptr[rdx+r15+0x12], r14d); dump();
test (r14d, ecx); dump();
test (r13d, eax); dump();
test (r9d, r11d); dump();
test (ptr[eax+ecx+3], rdx); dump();
test (ptr[eax+ecx+3], r10); dump();
test (ptr[eax+ecx+3], rax); dump();
test (ptr[rdx+r15+0x12], rsp); dump();
test (ptr[rdx+r15+0x12], r14); dump();
test (ptr[rdx+r15+0x12], rax); dump();
test (rbp, rbp); dump();
test (rsi, r13); dump();
test (rsi, rax); dump();
test (r14, rbp); dump();
test (r15, r9); dump();
test (r8, rax); dump();
test (rax, rcx); dump();
test (rax, r9); dump();
test (rax, rax); dump();
test (ptr[eax+ecx+3], bx); dump();
test (ptr[eax+ecx+3], ax); dump();
test (ptr[eax+ecx+3], r10w); dump();
test (bp, cx); dump();
test (sp, ax); dump();
test (si, r10w); dump();
test (ax, cx); dump();
test (ax, ax); dump();
test (ax, r15w); dump();
test (ptr[rdx+r15+0x12], dx); dump();
test (ptr[rdx+r15+0x12], ax); dump();
test (ptr[rdx+r15+0x12], r10w); dump();
test (r11w, cx); dump();
test (r10w, ax); dump();
test (r14w, r12w); dump();
test (ptr[eax+ecx+3], dl); dump();
test (ptr[eax+ecx+3], al); dump();
test (ptr[eax+ecx+3], r13b); dump();
test (ptr[eax+ecx+3], bpl); dump();
test (dl, bl); dump();
test (al, al); dump();
test (cl, r13b); dump();
test (cl, dil); dump();
test (al, al); dump();
test (al, al); dump();
test (al, r12b); dump();
test (al, bpl); dump();
test (ptr[rdx+r15+0x12], cl); dump();
test (ptr[rdx+r15+0x12], al); dump();
test (ptr[rdx+r15+0x12], r9b); dump();
test (ptr[rdx+r15+0x12], bpl); dump();
test (r10b, cl); dump();
test (r9b, al); dump();
test (r9b, r14b); dump();
test (r14b, spl); dump();
test (bpl, cl); dump();
test (bpl, al); dump();
test (bpl, r12b); dump();
test (spl, sil); dump();
test (ecx, 4); dump();
test (esi, 0xda); dump();
test (eax, 4); dump();
test (eax, 0xda); dump();
test (bl, 4); dump();
test (dl, 0xda); dump();
test (cx, 4); dump();
test (dx, 0xda); dump();
test (ax, 4); dump();
test (ax, 0xda); dump();
test (al, 4); dump();
test (al, 0xda); dump();
test (byte [eax+edx], 4); dump();
test (byte [eax+edx], 0xda); dump();
test (word [esi], 4); dump();
test (word [esi], 0xda); dump();
test (dword [ebp*2], 4); dump();
test (dword [ebp*2], 0xda); dump();
test (r14d, 4); dump();
test (r14d, 0xda); dump();
test (r8w, 4); dump();
test (r13w, 0xda); dump();
test (r15b, 4); dump();
test (r9b, 0xda); dump();
test (bpl, 4); dump();
test (spl, 0xda); dump();
test (rbp, 4); dump();
test (rsp, 0xda); dump();
test (r8, 4); dump();
test (r14, 0xda); dump();
test (rax, 4); dump();
test (rax, 0xda); dump();
    }
    void gen2()
    {
lss (edx, ptr[eax+ecx+3]); dump();
lss (ebp, ptr[rdx+r15+0x12]); dump();
lss (eax, ptr[eax+ecx+3]); dump();
lss (eax, ptr[rdx+r15+0x12]); dump();
lss (cx, ptr[eax+ecx+3]); dump();
lss (bx, ptr[rdx+r15+0x12]); dump();
lss (ax, ptr[eax+ecx+3]); dump();
lss (ax, ptr[rdx+r15+0x12]); dump();
lss (r12d, ptr[eax+ecx+3]); dump();
lss (r9d, ptr[rdx+r15+0x12]); dump();
lss (r8w, ptr[eax+ecx+3]); dump();
lss (r15w, ptr[rdx+r15+0x12]); dump();
lss (rbp, ptr[eax+ecx+3]); dump();
lss (rcx, ptr[rdx+r15+0x12]); dump();
lss (r8, ptr[eax+ecx+3]); dump();
lss (r10, ptr[rdx+r15+0x12]); dump();
lss (rax, ptr[eax+ecx+3]); dump();
lss (rax, ptr[rdx+r15+0x12]); dump();
lfs (esp, ptr[eax+ecx+3]); dump();
lfs (edi, ptr[rdx+r15+0x12]); dump();
lfs (eax, ptr[eax+ecx+3]); dump();
lfs (eax, ptr[rdx+r15+0x12]); dump();
lfs (sp, ptr[eax+ecx+3]); dump();
lfs (dx, ptr[rdx+r15+0x12]); dump();
lfs (ax, ptr[eax+ecx+3]); dump();
lfs (ax, ptr[rdx+r15+0x12]); dump();
lfs (r12d, ptr[eax+ecx+3]); dump();
lfs (r15d, ptr[rdx+r15+0x12]); dump();
lfs (r14w, ptr[eax+ecx+3]); dump();
lfs (r14w, ptr[rdx+r15+0x12]); dump();
lfs (rcx, ptr[eax+ecx+3]); dump();
lfs (rdx, ptr[rdx+r15+0x12]); dump();
lfs (r12, ptr[eax+ecx+3]); dump();
lfs (r10, ptr[rdx+r15+0x12]); dump();
lfs (rax, ptr[eax+ecx+3]); dump();
lfs (rax, ptr[rdx+r15+0x12]); dump();
lgs (esi, ptr[eax+ecx+3]); dump();
lgs (esi, ptr[rdx+r15+0x12]); dump();
lgs (eax, ptr[eax+ecx+3]); dump();
lgs (eax, ptr[rdx+r15+0x12]); dump();
lgs (bp, ptr[eax+ecx+3]); dump();
lgs (cx, ptr[rdx+r15+0x12]); dump();
lgs (ax, ptr[eax+ecx+3]); dump();
lgs (ax, ptr[rdx+r15+0x12]); dump();
lgs (r11d, ptr[eax+ecx+3]); dump();
lgs (r11d, ptr[rdx+r15+0x12]); dump();
lgs (r14w, ptr[eax+ecx+3]); dump();
lgs (r9w, ptr[rdx+r15+0x12]); dump();
lgs (rbx, ptr[eax+ecx+3]); dump();
lgs (rdx, ptr[rdx+r15+0x12]); dump();
lgs (r8, ptr[eax+ecx+3]); dump();
lgs (r9, ptr[rdx+r15+0x12]); dump();
lgs (rax, ptr[eax+ecx+3]); dump();
lgs (rax, ptr[rdx+r15+0x12]); dump();
ret (); dump();
ret (4); dump();
ret (0xda); dump();
mov (ptr[eax+ecx+3], esi); dump();
mov (ptr[eax+ecx+3], eax); dump();
mov (ptr[eax+ecx+3], r12d); dump();
mov (esi, ebx); dump();
mov (ecx, eax); dump();
mov (ecx, r11d); dump();
mov (eax, ebp); dump();
mov (eax, eax); dump();
mov (eax, r14d); dump();
mov (ptr[(void*)0x123], ebp); dump();
mov (ptr[(void*)0x123], eax); dump();
mov (ptr[(void*)0x123], r12d); dump();
mov (ptr[rdx+r15+0x12], esi); dump();
mov (ptr[rdx+r15+0x12], eax); dump();
mov (ptr[rdx+r15+0x12], r10d); dump();
mov (r12d, edx); dump();
mov (r15d, eax); dump();
mov (r14d, r11d); dump();
mov (ptr[eax+ecx+3], rdx); dump();
mov (ptr[eax+ecx+3], r14); dump();
mov (ptr[eax+ecx+3], rax); dump();
mov (ptr[(void*)0x123], rsp); dump();
mov (ptr[(void*)0x123], r14); dump();
mov (ptr[(void*)0x123], rax); dump();
mov (ptr[rdx+r15+0x12], rsp); dump();
mov (ptr[rdx+r15+0x12], r13); dump();
mov (ptr[rdx+r15+0x12], rax); dump();
mov (rcx, rcx); dump();
mov (rsi, r8); dump();
mov (rcx, rax); dump();
mov (r8, rbx); dump();
mov (r15, r8); dump();
mov (r11, rax); dump();
mov (rax, rdx); dump();
mov (rax, r14); dump();
mov (rax, rax); dump();
mov (ptr[eax+ecx+3], cx); dump();
mov (ptr[eax+ecx+3], ax); dump();
mov (ptr[eax+ecx+3], r11w); dump();
mov (di, cx); dump();
mov (di, ax); dump();
mov (bx, r9w); dump();
mov (ax, bx); dump();
mov (ax, ax); dump();
mov (ax, r12w); dump();
mov (ptr[(void*)0x123], sp); dump();
mov (ptr[(void*)0x123], ax); dump();
mov (ptr[(void*)0x123], r9w); dump();
mov (ptr[rdx+r15+0x12], cx); dump();
mov (ptr[rdx+r15+0x12], ax); dump();
mov (ptr[rdx+r15+0x12], r13w); dump();
mov (r15w, cx); dump();
mov (r13w, ax); dump();
mov (r15w, r15w); dump();
mov (ptr[eax+ecx+3], dl); dump();
mov (ptr[eax+ecx+3], al); dump();
mov (ptr[eax+ecx+3], r15b); dump();
mov (ptr[eax+ecx+3], sil); dump();
mov (dl, bl); dump();
mov (cl, al); dump();
mov (dl, r9b); dump();
mov (al, dil); dump();
mov (al, cl); dump();
mov (al, al); dump();
mov (al, r12b); dump();
mov (al, dil); dump();
mov (ptr[(void*)0x123], dl); dump();
mov (ptr[(void*)0x123], al); dump();
mov (ptr[(void*)0x123], r12b); dump();
mov (ptr[(void*)0x123], sil); dump();
mov (ptr[rdx+r15+0x12], dl); dump();
mov (ptr[rdx+r15+0x12], al); dump();
mov (ptr[rdx+r15+0x12], r9b); dump();
mov (ptr[rdx+r15+0x12], spl); dump();
mov (r8b, dl); dump();
mov (r10b, al); dump();
mov (r10b, r13b); dump();
mov (r13b, bpl); dump();
mov (dil, al); dump();
mov (dil, al); dump();
mov (sil, r9b); dump();
mov (spl, spl); dump();
mov (edx, ptr[eax+ecx+3]); dump();
mov (ecx, ptr[(void*)0x123]); dump();
mov (ecx, ptr[rdx+r15+0x12]); dump();
mov (eax, ptr[eax+ecx+3]); dump();
mov (eax, ptr[(void*)0x123]); dump();
mov (eax, ptr[rdx+r15+0x12]); dump();
mov (bl, ptr[eax+ecx+3]); dump();
mov (cl, ptr[(void*)0x123]); dump();
mov (cl, ptr[rdx+r15+0x12]); dump();
mov (bp, ptr[eax+ecx+3]); dump();
mov (bx, ptr[(void*)0x123]); dump();
mov (di, ptr[rdx+r15+0x12]); dump();
mov (ax, ptr[eax+ecx+3]); dump();
mov (ax, ptr[(void*)0x123]); dump();
mov (ax, ptr[rdx+r15+0x12]); dump();
mov (al, ptr[eax+ecx+3]); dump();
mov (al, ptr[(void*)0x123]); dump();
mov (al, ptr[rdx+r15+0x12]); dump();
mov (r9d, ptr[eax+ecx+3]); dump();
mov (r8d, ptr[(void*)0x123]); dump();
mov (r9d, ptr[rdx+r15+0x12]); dump();
mov (r15w, ptr[eax+ecx+3]); dump();
mov (r14w, ptr[(void*)0x123]); dump();
mov (r12w, ptr[rdx+r15+0x12]); dump();
mov (r14b, ptr[eax+ecx+3]); dump();
mov (r12b, ptr[(void*)0x123]); dump();
mov (r8b, ptr[rdx+r15+0x12]); dump();
mov (rbp, ptr[eax+ecx+3]); dump();
mov (rbp, ptr[(void*)0x123]); dump();
mov (rbp, ptr[rdx+r15+0x12]); dump();
mov (r10, ptr[eax+ecx+3]); dump();
mov (r10, ptr[(void*)0x123]); dump();
mov (r11, ptr[rdx+r15+0x12]); dump();
mov (rax, ptr[eax+ecx+3]); dump();
mov (rax, ptr[(void*)0x123]); dump();
mov (rax, ptr[rdx+r15+0x12]); dump();
mov (byte [eax+edx], 4); dump();
mov (byte [eax+edx], 0xda); dump();
mov (word [esi], 4); dump();
mov (word [esi], 0xda); dump();
mov (dword [ebp*2], 4); dump();
mov (dword [ebp*2], 0xda); dump();
mov (rbp, 0x1234567890abcdefLL); dump();
mov (r12, 0x1234567890abcdefLL); dump();
mov (rax, 0x1234567890abcdefLL); dump();
movbe (ecx, ptr[eax+ecx+3]); dump();
movbe (esi, ptr[rdx+r15+0x12]); dump();
movbe (eax, ptr[eax+ecx+3]); dump();
movbe (eax, ptr[rdx+r15+0x12]); dump();
movbe (sp, ptr[eax+ecx+3]); dump();
movbe (si, ptr[rdx+r15+0x12]); dump();
movbe (ax, ptr[eax+ecx+3]); dump();
movbe (ax, ptr[rdx+r15+0x12]); dump();
movbe (r9d, ptr[eax+ecx+3]); dump();
movbe (r10d, ptr[rdx+r15+0x12]); dump();
movbe (r13w, ptr[eax+ecx+3]); dump();
movbe (r9w, ptr[rdx+r15+0x12]); dump();
movbe (rcx, ptr[eax+ecx+3]); dump();
movbe (rcx, ptr[rdx+r15+0x12]); dump();
movbe (r9, ptr[eax+ecx+3]); dump();
movbe (r14, ptr[rdx+r15+0x12]); dump();
movbe (rax, ptr[eax+ecx+3]); dump();
movbe (rax, ptr[rdx+r15+0x12]); dump();
movbe (ptr[eax+ecx+3], esi); dump();
movbe (ptr[eax+ecx+3], eax); dump();
movbe (ptr[eax+ecx+3], bx); dump();
movbe (ptr[eax+ecx+3], ax); dump();
movbe (ptr[eax+ecx+3], r8d); dump();
movbe (ptr[eax+ecx+3], r11w); dump();
movbe (ptr[eax+ecx+3], rsi); dump();
movbe (ptr[eax+ecx+3], r11); dump();
movbe (ptr[eax+ecx+3], rax); dump();
movbe (ptr[rdx+r15+0x12], esp); dump();
movbe (ptr[rdx+r15+0x12], eax); dump();
movbe (ptr[rdx+r15+0x12], cx); dump();
movbe (ptr[rdx+r15+0x12], ax); dump();
movbe (ptr[rdx+r15+0x12], r15d); dump();
movbe (ptr[rdx+r15+0x12], r12w); dump();
movbe (ptr[rdx+r15+0x12], rdi); dump();
movbe (ptr[rdx+r15+0x12], r13); dump();
movbe (ptr[rdx+r15+0x12], rax); dump();
mov (eax, ptr [0x1234567890abcdefLL]); dump();
mov (ax, ptr [0x1234567890abcdefLL]); dump();
mov (al, ptr [0x1234567890abcdefLL]); dump();
mov (rax, ptr [0x1234567890abcdefLL]); dump();
mov (ptr [0x1234567890abcdefLL] , eax); dump();
mov (ptr [0x1234567890abcdefLL] , ax); dump();
mov (ptr [0x1234567890abcdefLL] , al); dump();
mov (ptr [0x1234567890abcdefLL] , rax); dump();
mov (qword [rax], 0 ); dump();
mov (qword [rax], 0x12 ); dump();
mov (qword [rax], 0x1234 ); dump();
mov (qword [rax], 0x12345678 ); dump();
mov (qword [rax], 1000000 ); dump();
mov (rdx, qword [rax] ); dump();
mov (eax, ptr [eax + ecx * 0]); dump();
movsx (rsp, dl); dump();
movsx (rcx, sp); dump();
movsx (rsi, ax); dump();
movsx (rbx, al); dump();
movsx (rdx, byte [eax+edx]); dump();
movsx (rdx, word [esi]); dump();
movsx (rsi, r15w); dump();
movsx (rbx, r9b); dump();
movsx (r15, cl); dump();
movsx (r12, sp); dump();
movsx (r10, ax); dump();
movsx (r8, al); dump();
movsx (r11, byte [eax+edx]); dump();
movsx (r12, word [esi]); dump();
movsx (r14, r15w); dump();
movsx (r13, r15b); dump();
movsx (rax, cl); dump();
movsx (rax, cx); dump();
movsx (rax, ax); dump();
movsx (rax, al); dump();
movsx (rax, byte [eax+edx]); dump();
movsx (rax, word [esi]); dump();
movsx (rax, r9w); dump();
movsx (rax, r9b); dump();
movsx (edi, dl); dump();
movsx (esi, di); dump();
movsx (edi, ax); dump();
movsx (ecx, al); dump();
movsx (ebp, byte [eax+edx]); dump();
movsx (edx, word [esi]); dump();
movsx (edx, r13w); dump();
movsx (edx, r10b); dump();
movsx (eax, cl); dump();
movsx (eax, cx); dump();
movsx (eax, ax); dump();
movsx (eax, al); dump();
movsx (eax, byte [eax+edx]); dump();
movsx (eax, word [esi]); dump();
movsx (eax, r15w); dump();
movsx (eax, r10b); dump();
movsx (r14d, cl); dump();
movsx (r9d, sp); dump();
movsx (r14d, ax); dump();
movsx (r11d, al); dump();
movsx (r11d, byte [eax+edx]); dump();
movsx (r10d, word [esi]); dump();
movsx (r13d, r10w); dump();
movsx (r12d, r13b); dump();
movsx (cx, cl); dump();
movsx (si, al); dump();
movsx (cx, byte [eax+edx]); dump();
movsx (bp, r14b); dump();
movsx (ax, cl); dump();
movsx (ax, al); dump();
movsx (ax, byte [eax+edx]); dump();
movsx (ax, r9b); dump();
movsx (r13w, dl); dump();
movsx (r12w, al); dump();
movsx (r12w, byte [eax+edx]); dump();
movsx (r9w, r13b); dump();
movzx (rdi, dl); dump();
movzx (rcx, dx); dump();
movzx (rbp, ax); dump();
movzx (rcx, al); dump();
movzx (rsi, byte [eax+edx]); dump();
movzx (rcx, word [esi]); dump();
movzx (rsp, r12w); dump();
movzx (rsp, r10b); dump();
movzx (r11, al); dump();
movzx (r12, di); dump();
movzx (r14, ax); dump();
movzx (r15, al); dump();
movzx (r13, byte [eax+edx]); dump();
movzx (r11, word [esi]); dump();
movzx (r12, r10w); dump();
movzx (r14, r10b); dump();
movzx (rax, al); dump();
movzx (rax, di); dump();
movzx (rax, ax); dump();
movzx (rax, al); dump();
movzx (rax, byte [eax+edx]); dump();
movzx (rax, word [esi]); dump();
movzx (rax, r9w); dump();
movzx (rax, r12b); dump();
movzx (ebp, dl); dump();
movzx (ebx, dx); dump();
movzx (ebp, ax); dump();
movzx (esp, al); dump();
movzx (ecx, byte [eax+edx]); dump();
movzx (ecx, word [esi]); dump();
movzx (ecx, r11w); dump();
movzx (esi, r9b); dump();
movzx (eax, cl); dump();
movzx (eax, sp); dump();
movzx (eax, ax); dump();
movzx (eax, al); dump();
movzx (eax, byte [eax+edx]); dump();
movzx (eax, word [esi]); dump();
movzx (eax, r10w); dump();
movzx (eax, r14b); dump();
movzx (r14d, dl); dump();
movzx (r15d, bx); dump();
movzx (r9d, ax); dump();
movzx (r9d, al); dump();
movzx (r15d, byte [eax+edx]); dump();
movzx (r10d, word [esi]); dump();
movzx (r13d, r14w); dump();
movzx (r14d, r12b); dump();
movzx (di, bl); dump();
movzx (cx, al); dump();
movzx (bx, byte [eax+edx]); dump();
movzx (cx, r15b); dump();
movzx (ax, dl); dump();
movzx (ax, al); dump();
movzx (ax, byte [eax+edx]); dump();
movzx (ax, r10b); dump();
movzx (r12w, bl); dump();
movzx (r10w, al); dump();
movzx (r15w, byte [eax+edx]); dump();
movzx (r9w, r13b); dump();
movsxd (rsi, ebx); dump();
movsxd (rbx, eax); dump();
movsxd (rdx, dword [ebp*2]); dump();
movsxd (rsi, r13d); dump();
movsxd (r10, ebx); dump();
movsxd (r11, eax); dump();
movsxd (r11, dword [ebp*2]); dump();
movsxd (r11, r9d); dump();
movsxd (rax, ecx); dump();
movsxd (rax, eax); dump();
movsxd (rax, dword [ebp*2]); dump();
movsxd (rax, r13d); dump();
cmpxchg8b (ptr[eax+ecx+3]); dump();
cmpxchg8b (ptr[rdx+r15+0x12]); dump();
cmpxchg16b (ptr[eax+ecx+3]); dump();
cmpxchg16b (ptr[rdx+r15+0x12]); dump();
fxrstor64 (ptr[eax+ecx+3]); dump();
fxrstor64 (ptr[rdx+r15+0x12]); dump();
xadd (ptr[eax+ecx+3], bl); dump();
xadd (ptr[eax+ecx+3], al); dump();
xadd (ptr[eax+ecx+3], r12b); dump();
xadd (dl, al); dump();
xadd (cl, al); dump();
xadd (cl, r9b); dump();
xadd (al, cl); dump();
xadd (al, al); dump();
xadd (al, r14b); dump();
xadd (ptr[rdx+r15+0x12], cl); dump();
xadd (ptr[rdx+r15+0x12], al); dump();
xadd (ptr[rdx+r15+0x12], r10b); dump();
xadd (r14b, bl); dump();
xadd (r10b, al); dump();
xadd (r14b, r13b); dump();
xadd (ptr[eax+ecx+3], cx); dump();
xadd (ptr[eax+ecx+3], ax); dump();
xadd (ptr[eax+ecx+3], r10w); dump();
xadd (si, bx); dump();
xadd (di, ax); dump();
xadd (si, r8w); dump();
xadd (ax, di); dump();
xadd (ax, ax); dump();
xadd (ax, r8w); dump();
xadd (ptr[rdx+r15+0x12], dx); dump();
xadd (ptr[rdx+r15+0x12], ax); dump();
xadd (ptr[rdx+r15+0x12], r14w); dump();
xadd (r11w, dx); dump();
xadd (r9w, ax); dump();
xadd (r15w, r13w); dump();
xadd (ptr[eax+ecx+3], edi); dump();
xadd (ptr[eax+ecx+3], eax); dump();
xadd (ptr[eax+ecx+3], r14d); dump();
xadd (ebx, esp); dump();
xadd (edx, eax); dump();
xadd (edi, r14d); dump();
xadd (eax, edx); dump();
xadd (eax, eax); dump();
xadd (eax, r10d); dump();
xadd (ptr[rdx+r15+0x12], esi); dump();
xadd (ptr[rdx+r15+0x12], eax); dump();
xadd (ptr[rdx+r15+0x12], r15d); dump();
xadd (r14d, ecx); dump();
xadd (r15d, eax); dump();
xadd (r9d, r14d); dump();
xadd (ptr[eax+ecx+3], rdx); dump();
xadd (ptr[eax+ecx+3], r9); dump();
xadd (ptr[eax+ecx+3], rax); dump();
xadd (ptr[rdx+r15+0x12], rbp); dump();
xadd (ptr[rdx+r15+0x12], r15); dump();
xadd (ptr[rdx+r15+0x12], rax); dump();
xadd (rsi, rbx); dump();
xadd (rbx, r14); dump();
xadd (rcx, rax); dump();
xadd (r9, rsp); dump();
xadd (r8, r14); dump();
xadd (r11, rax); dump();
xadd (rax, rdx); dump();
xadd (rax, r11); dump();
xadd (rax, rax); dump();
cmpxchg (ptr[eax+ecx+3], dl); dump();
cmpxchg (ptr[eax+ecx+3], al); dump();
cmpxchg (ptr[eax+ecx+3], r8b); dump();
cmpxchg (cl, bl); dump();
cmpxchg (bl, al); dump();
cmpxchg (dl, r13b); dump();
cmpxchg (al, cl); dump();
cmpxchg (al, al); dump();
cmpxchg (al, r11b); dump();
cmpxchg (ptr[rdx+r15+0x12], bl); dump();
cmpxchg (ptr[rdx+r15+0x12], al); dump();
cmpxchg (ptr[rdx+r15+0x12], r15b); dump();
cmpxchg (r15b, cl); dump();
cmpxchg (r9b, al); dump();
cmpxchg (r8b, r15b); dump();
cmpxchg (ptr[eax+ecx+3], cx); dump();
cmpxchg (ptr[eax+ecx+3], ax); dump();
cmpxchg (ptr[eax+ecx+3], r14w); dump();
cmpxchg (sp, si); dump();
cmpxchg (si, ax); dump();
cmpxchg (si, r10w); dump();
cmpxchg (ax, sp); dump();
cmpxchg (ax, ax); dump();
cmpxchg (ax, r13w); dump();
cmpxchg (ptr[rdx+r15+0x12], bp); dump();
cmpxchg (ptr[rdx+r15+0x12], ax); dump();
cmpxchg (ptr[rdx+r15+0x12], r15w); dump();
cmpxchg (r11w, dx); dump();
cmpxchg (r13w, ax); dump();
cmpxchg (r12w, r13w); dump();
cmpxchg (ptr[eax+ecx+3], esp); dump();
cmpxchg (ptr[eax+ecx+3], eax); dump();
cmpxchg (ptr[eax+ecx+3], r14d); dump();
cmpxchg (esi, ecx); dump();
cmpxchg (ebp, eax); dump();
cmpxchg (esp, r15d); dump();
cmpxchg (eax, esp); dump();
cmpxchg (eax, eax); dump();
cmpxchg (eax, r9d); dump();
cmpxchg (ptr[rdx+r15+0x12], esi); dump();
cmpxchg (ptr[rdx+r15+0x12], eax); dump();
cmpxchg (ptr[rdx+r15+0x12], r15d); dump();
cmpxchg (r11d, ebx); dump();
cmpxchg (r9d, eax); dump();
cmpxchg (r13d, r12d); dump();
cmpxchg (ptr[eax+ecx+3], rcx); dump();
cmpxchg (ptr[eax+ecx+3], r8); dump();
cmpxchg (ptr[eax+ecx+3], rax); dump();
cmpxchg (ptr[rdx+r15+0x12], rsp); dump();
cmpxchg (ptr[rdx+r15+0x12], r15); dump();
cmpxchg (ptr[rdx+r15+0x12], rax); dump();
cmpxchg (rbp, rbp); dump();
cmpxchg (rcx, r12); dump();
cmpxchg (rdi, rax); dump();
cmpxchg (r12, rsi); dump();
cmpxchg (r12, r14); dump();
cmpxchg (r9, rax); dump();
cmpxchg (rax, rsp); dump();
cmpxchg (rax, r13); dump();
cmpxchg (rax, rax); dump();
xchg (cl, ptr[eax+ecx+3]); dump();
xchg (dl, bl); dump();
xchg (cl, al); dump();
xchg (cl, ptr[rdx+r15+0x12]); dump();
xchg (cl, r13b); dump();
xchg (al, ptr[eax+ecx+3]); dump();
xchg (al, bl); dump();
xchg (al, al); dump();
xchg (al, ptr[rdx+r15+0x12]); dump();
xchg (al, r9b); dump();
xchg (r8b, ptr[eax+ecx+3]); dump();
xchg (r15b, cl); dump();
xchg (r8b, al); dump();
xchg (r11b, ptr[rdx+r15+0x12]); dump();
xchg (r14b, r14b); dump();
xchg (ptr[eax+ecx+3], bl); dump();
xchg (ptr[eax+ecx+3], al); dump();
xchg (ptr[eax+ecx+3], r15b); dump();
xchg (ptr[rdx+r15+0x12], al); dump();
xchg (ptr[rdx+r15+0x12], al); dump();
xchg (ptr[rdx+r15+0x12], r13b); dump();
xchg (sp, ptr[eax+ecx+3]); dump();
xchg (cx, cx); dump();
xchg (si, ax); dump();
xchg (bp, ptr[rdx+r15+0x12]); dump();
xchg (bp, r13w); dump();
xchg (ax, ptr[eax+ecx+3]); dump();
xchg (ax, bp); dump();
xchg (ax, ax); dump();
xchg (ax, ptr[rdx+r15+0x12]); dump();
xchg (ax, r12w); dump();
xchg (r14w, ptr[eax+ecx+3]); dump();
xchg (r11w, si); dump();
xchg (r13w, ax); dump();
xchg (r8w, ptr[rdx+r15+0x12]); dump();
xchg (r14w, r15w); dump();
xchg (ptr[eax+ecx+3], bx); dump();
xchg (ptr[eax+ecx+3], ax); dump();
xchg (ptr[eax+ecx+3], r10w); dump();
xchg (ptr[rdx+r15+0x12], cx); dump();
xchg (ptr[rdx+r15+0x12], ax); dump();
xchg (ptr[rdx+r15+0x12], r13w); dump();
xchg (edi, ptr[eax+ecx+3]); dump();
xchg (ecx, ecx); dump();
xchg (ecx, eax); dump();
xchg (ebx, ptr[rdx+r15+0x12]); dump();
xchg (ebx, r15d); dump();
xchg (eax, ptr[eax+ecx+3]); dump();
xchg (eax, edi); dump();
xchg (eax, eax); dump();
xchg (eax, ptr[rdx+r15+0x12]); dump();
xchg (eax, r12d); dump();
xchg (r15d, ptr[eax+ecx+3]); dump();
xchg (r9d, edx); dump();
xchg (r9d, eax); dump();
xchg (r14d, ptr[rdx+r15+0x12]); dump();
xchg (r12d, r9d); dump();
xchg (ptr[eax+ecx+3], edx); dump();
xchg (ptr[eax+ecx+3], eax); dump();
xchg (ptr[eax+ecx+3], r15d); dump();
xchg (ptr[rdx+r15+0x12], ebx); dump();
xchg (ptr[rdx+r15+0x12], eax); dump();
xchg (ptr[rdx+r15+0x12], r9d); dump();
xchg (rsi, ptr[eax+ecx+3]); dump();
xchg (rcx, ptr[rdx+r15+0x12]); dump();
xchg (rbp, rdi); dump();
xchg (rbx, r8); dump();
xchg (rcx, rax); dump();
xchg (r9, ptr[eax+ecx+3]); dump();
xchg (r9, ptr[rdx+r15+0x12]); dump();
xchg (r8, rcx); dump();
xchg (r11, r11); dump();
xchg (r15, rax); dump();
xchg (rax, ptr[eax+ecx+3]); dump();
xchg (rax, ptr[rdx+r15+0x12]); dump();
xchg (rax, rdx); dump();
xchg (rax, r13); dump();
xchg (rax, rax); dump();
rcl (esi, 4); dump();
rcl (ebp, 1); dump();
rcl (esp, cl); dump();
rcl (edx, 0xda); dump();
rcl (eax, 4); dump();
rcl (eax, 1); dump();
rcl (eax, cl); dump();
rcl (eax, 0xda); dump();
rcl (bl, 4); dump();
rcl (al, 1); dump();
rcl (bl, cl); dump();
rcl (cl, 0xda); dump();
rcl (cx, 4); dump();
rcl (sp, 1); dump();
rcl (di, cl); dump();
rcl (sp, 0xda); dump();
rcl (ax, 4); dump();
rcl (ax, 1); dump();
rcl (ax, cl); dump();
rcl (ax, 0xda); dump();
rcl (al, 4); dump();
rcl (al, 1); dump();
rcl (al, cl); dump();
rcl (al, 0xda); dump();
rcl (byte [eax+edx], 4); dump();
rcl (byte [eax+edx], 1); dump();
rcl (byte [eax+edx], cl); dump();
rcl (byte [eax+edx], 0xda); dump();
rcl (word [esi], 4); dump();
rcl (word [esi], 1); dump();
rcl (word [esi], cl); dump();
rcl (word [esi], 0xda); dump();
rcl (dword [ebp*2], 4); dump();
rcl (dword [ebp*2], 1); dump();
rcl (dword [ebp*2], cl); dump();
rcl (dword [ebp*2], 0xda); dump();
rcl (r14d, 4); dump();
rcl (r8d, 1); dump();
rcl (r10d, cl); dump();
rcl (r12d, 0xda); dump();
rcl (r15w, 4); dump();
rcl (r8w, 1); dump();
rcl (r14w, cl); dump();
rcl (r9w, 0xda); dump();
rcl (r8b, 4); dump();
rcl (r12b, 1); dump();
rcl (r15b, cl); dump();
rcl (r8b, 0xda); dump();
rcl (rcx, 4); dump();
rcl (rcx, 1); dump();
rcl (rdi, cl); dump();
rcl (rsp, 0xda); dump();
rcl (r11, 4); dump();
rcl (r10, 1); dump();
rcl (r10, cl); dump();
rcl (r12, 0xda); dump();
rcl (rax, 4); dump();
rcl (rax, 1); dump();
rcl (rax, cl); dump();
rcl (rax, 0xda); dump();
rcr (esp, 4); dump();
rcr (ebx, 1); dump();
rcr (edi, cl); dump();
rcr (esp, 0xda); dump();
rcr (eax, 4); dump();
rcr (eax, 1); dump();
rcr (eax, cl); dump();
rcr (eax, 0xda); dump();
rcr (cl, 4); dump();
rcr (bl, 1); dump();
rcr (al, cl); dump();
rcr (dl, 0xda); dump();
rcr (cx, 4); dump();
rcr (sp, 1); dump();
rcr (cx, cl); dump();
rcr (di, 0xda); dump();
rcr (ax, 4); dump();
rcr (ax, 1); dump();
rcr (ax, cl); dump();
rcr (ax, 0xda); dump();
rcr (al, 4); dump();
rcr (al, 1); dump();
rcr (al, cl); dump();
rcr (al, 0xda); dump();
rcr (byte [eax+edx], 4); dump();
rcr (byte [eax+edx], 1); dump();
rcr (byte [eax+edx], cl); dump();
rcr (byte [eax+edx], 0xda); dump();
rcr (word [esi], 4); dump();
rcr (word [esi], 1); dump();
rcr (word [esi], cl); dump();
rcr (word [esi], 0xda); dump();
rcr (dword [ebp*2], 4); dump();
rcr (dword [ebp*2], 1); dump();
rcr (dword [ebp*2], cl); dump();
rcr (dword [ebp*2], 0xda); dump();
rcr (r8d, 4); dump();
rcr (r9d, 1); dump();
rcr (r15d, cl); dump();
rcr (r8d, 0xda); dump();
rcr (r14w, 4); dump();
rcr (r15w, 1); dump();
rcr (r8w, cl); dump();
rcr (r13w, 0xda); dump();
rcr (r8b, 4); dump();
rcr (r11b, 1); dump();
rcr (r8b, cl); dump();
rcr (r9b, 0xda); dump();
rcr (rbp, 4); dump();
rcr (rdx, 1); dump();
rcr (rdi, cl); dump();
rcr (rcx, 0xda); dump();
rcr (r14, 4); dump();
rcr (r12, 1); dump();
rcr (r11, cl); dump();
rcr (r14, 0xda); dump();
rcr (rax, 4); dump();
rcr (rax, 1); dump();
rcr (rax, cl); dump();
rcr (rax, 0xda); dump();
rol (ebx, 4); dump();
rol (esp, 1); dump();
rol (esi, cl); dump();
rol (edi, 0xda); dump();
rol (eax, 4); dump();
rol (eax, 1); dump();
rol (eax, cl); dump();
rol (eax, 0xda); dump();
rol (al, 4); dump();
rol (bl, 1); dump();
rol (cl, cl); dump();
rol (cl, 0xda); dump();
rol (dx, 4); dump();
rol (sp, 1); dump();
rol (cx, cl); dump();
rol (si, 0xda); dump();
rol (ax, 4); dump();
rol (ax, 1); dump();
rol (ax, cl); dump();
rol (ax, 0xda); dump();
rol (al, 4); dump();
rol (al, 1); dump();
rol (al, cl); dump();
rol (al, 0xda); dump();
rol (byte [eax+edx], 4); dump();
rol (byte [eax+edx], 1); dump();
rol (byte [eax+edx], cl); dump();
rol (byte [eax+edx], 0xda); dump();
rol (word [esi], 4); dump();
rol (word [esi], 1); dump();
rol (word [esi], cl); dump();
rol (word [esi], 0xda); dump();
rol (dword [ebp*2], 4); dump();
rol (dword [ebp*2], 1); dump();
rol (dword [ebp*2], cl); dump();
rol (dword [ebp*2], 0xda); dump();
rol (r9d, 4); dump();
rol (r10d, 1); dump();
rol (r14d, cl); dump();
rol (r10d, 0xda); dump();
rol (r8w, 4); dump();
rol (r11w, 1); dump();
rol (r9w, cl); dump();
rol (r11w, 0xda); dump();
rol (r15b, 4); dump();
rol (r15b, 1); dump();
rol (r11b, cl); dump();
rol (r9b, 0xda); dump();
rol (rbp, 4); dump();
rol (rcx, 1); dump();
rol (rdi, cl); dump();
rol (rdx, 0xda); dump();
rol (r13, 4); dump();
rol (r11, 1); dump();
rol (r8, cl); dump();
rol (r15, 0xda); dump();
rol (rax, 4); dump();
rol (rax, 1); dump();
rol (rax, cl); dump();
rol (rax, 0xda); dump();
ror (edi, 4); dump();
ror (ebx, 1); dump();
ror (esp, cl); dump();
ror (edi, 0xda); dump();
ror (eax, 4); dump();
ror (eax, 1); dump();
ror (eax, cl); dump();
ror (eax, 0xda); dump();
ror (al, 4); dump();
ror (cl, 1); dump();
ror (dl, cl); dump();
ror (bl, 0xda); dump();
ror (cx, 4); dump();
ror (bx, 1); dump();
ror (bx, cl); dump();
ror (di, 0xda); dump();
ror (ax, 4); dump();
ror (ax, 1); dump();
ror (ax, cl); dump();
ror (ax, 0xda); dump();
ror (al, 4); dump();
ror (al, 1); dump();
ror (al, cl); dump();
ror (al, 0xda); dump();
ror (byte [eax+edx], 4); dump();
ror (byte [eax+edx], 1); dump();
ror (byte [eax+edx], cl); dump();
ror (byte [eax+edx], 0xda); dump();
ror (word [esi], 4); dump();
ror (word [esi], 1); dump();
ror (word [esi], cl); dump();
ror (word [esi], 0xda); dump();
ror (dword [ebp*2], 4); dump();
ror (dword [ebp*2], 1); dump();
ror (dword [ebp*2], cl); dump();
ror (dword [ebp*2], 0xda); dump();
ror (r8d, 4); dump();
ror (r14d, 1); dump();
ror (r9d, cl); dump();
ror (r12d, 0xda); dump();
ror (r8w, 4); dump();
ror (r13w, 1); dump();
ror (r9w, cl); dump();
ror (r9w, 0xda); dump();
ror (r11b, 4); dump();
ror (r13b, 1); dump();
ror (r13b, cl); dump();
ror (r11b, 0xda); dump();
ror (rbx, 4); dump();
ror (rdi, 1); dump();
ror (rdi, cl); dump();
ror (rdx, 0xda); dump();
ror (r10, 4); dump();
ror (r12, 1); dump();
ror (r8, cl); dump();
ror (r9, 0xda); dump();
ror (rax, 4); dump();
ror (rax, 1); dump();
ror (rax, cl); dump();
ror (rax, 0xda); dump();
sar (edx, 4); dump();
sar (edx, 1); dump();
sar (ebx, cl); dump();
sar (esp, 0xda); dump();
sar (eax, 4); dump();
sar (eax, 1); dump();
sar (eax, cl); dump();
sar (eax, 0xda); dump();
sar (cl, 4); dump();
sar (bl, 1); dump();
sar (bl, cl); dump();
sar (bl, 0xda); dump();
sar (sp, 4); dump();
sar (cx, 1); dump();
sar (bp, cl); dump();
sar (bp, 0xda); dump();
sar (ax, 4); dump();
sar (ax, 1); dump();
sar (ax, cl); dump();
sar (ax, 0xda); dump();
sar (al, 4); dump();
sar (al, 1); dump();
sar (al, cl); dump();
sar (al, 0xda); dump();
sar (byte [eax+edx], 4); dump();
sar (byte [eax+edx], 1); dump();
sar (byte [eax+edx], cl); dump();
sar (byte [eax+edx], 0xda); dump();
sar (word [esi], 4); dump();
sar (word [esi], 1); dump();
sar (word [esi], cl); dump();
sar (word [esi], 0xda); dump();
sar (dword [ebp*2], 4); dump();
sar (dword [ebp*2], 1); dump();
sar (dword [ebp*2], cl); dump();
sar (dword [ebp*2], 0xda); dump();
sar (r12d, 4); dump();
sar (r14d, 1); dump();
sar (r14d, cl); dump();
sar (r10d, 0xda); dump();
sar (r9w, 4); dump();
sar (r10w, 1); dump();
sar (r10w, cl); dump();
sar (r12w, 0xda); dump();
sar (r8b, 4); dump();
sar (r10b, 1); dump();
sar (r9b, cl); dump();
sar (r15b, 0xda); dump();
sar (rsi, 4); dump();
sar (rbx, 1); dump();
sar (rsi, cl); dump();
sar (rbp, 0xda); dump();
sar (r12, 4); dump();
sar (r11, 1); dump();
sar (r13, cl); dump();
sar (r10, 0xda); dump();
sar (rax, 4); dump();
sar (rax, 1); dump();
sar (rax, cl); dump();
sar (rax, 0xda); dump();
shl (esp, 4); dump();
shl (edi, 1); dump();
shl (ebx, cl); dump();
shl (esp, 0xda); dump();
shl (eax, 4); dump();
shl (eax, 1); dump();
shl (eax, cl); dump();
shl (eax, 0xda); dump();
shl (cl, 4); dump();
shl (cl, 1); dump();
shl (bl, cl); dump();
shl (cl, 0xda); dump();
shl (cx, 4); dump();
shl (bp, 1); dump();
shl (bx, cl); dump();
shl (dx, 0xda); dump();
shl (ax, 4); dump();
shl (ax, 1); dump();
shl (ax, cl); dump();
shl (ax, 0xda); dump();
shl (al, 4); dump();
shl (al, 1); dump();
shl (al, cl); dump();
shl (al, 0xda); dump();
shl (byte [eax+edx], 4); dump();
shl (byte [eax+edx], 1); dump();
shl (byte [eax+edx], cl); dump();
shl (byte [eax+edx], 0xda); dump();
shl (word [esi], 4); dump();
shl (word [esi], 1); dump();
shl (word [esi], cl); dump();
shl (word [esi], 0xda); dump();
shl (dword [ebp*2], 4); dump();
shl (dword [ebp*2], 1); dump();
shl (dword [ebp*2], cl); dump();
shl (dword [ebp*2], 0xda); dump();
shl (r10d, 4); dump();
shl (r8d, 1); dump();
shl (r15d, cl); dump();
shl (r14d, 0xda); dump();
shl (r11w, 4); dump();
shl (r9w, 1); dump();
shl (r14w, cl); dump();
shl (r9w, 0xda); dump();
shl (r11b, 4); dump();
shl (r12b, 1); dump();
shl (r11b, cl); dump();
shl (r15b, 0xda); dump();
shl (rbx, 4); dump();
shl (rcx, 1); dump();
shl (rcx, cl); dump();
shl (rsp, 0xda); dump();
shl (r12, 4); dump();
shl (r13, 1); dump();
shl (r11, cl); dump();
shl (r10, 0xda); dump();
shl (rax, 4); dump();
shl (rax, 1); dump();
shl (rax, cl); dump();
shl (rax, 0xda); dump();
shr (ecx, 4); dump();
shr (edx, 1); dump();
shr (esp, cl); dump();
shr (edx, 0xda); dump();
shr (eax, 4); dump();
shr (eax, 1); dump();
shr (eax, cl); dump();
shr (eax, 0xda); dump();
shr (dl, 4); dump();
shr (cl, 1); dump();
shr (al, cl); dump();
shr (bl, 0xda); dump();
shr (dx, 4); dump();
shr (si, 1); dump();
shr (di, cl); dump();
shr (cx, 0xda); dump();
shr (ax, 4); dump();
shr (ax, 1); dump();
shr (ax, cl); dump();
shr (ax, 0xda); dump();
shr (al, 4); dump();
shr (al, 1); dump();
shr (al, cl); dump();
shr (al, 0xda); dump();
shr (byte [eax+edx], 4); dump();
shr (byte [eax+edx], 1); dump();
shr (byte [eax+edx], cl); dump();
shr (byte [eax+edx], 0xda); dump();
shr (word [esi], 4); dump();
shr (word [esi], 1); dump();
shr (word [esi], cl); dump();
shr (word [esi], 0xda); dump();
shr (dword [ebp*2], 4); dump();
shr (dword [ebp*2], 1); dump();
shr (dword [ebp*2], cl); dump();
shr (dword [ebp*2], 0xda); dump();
shr (r9d, 4); dump();
shr (r10d, 1); dump();
shr (r14d, cl); dump();
shr (r12d, 0xda); dump();
shr (r8w, 4); dump();
shr (r9w, 1); dump();
shr (r14w, cl); dump();
shr (r8w, 0xda); dump();
shr (r10b, 4); dump();
shr (r14b, 1); dump();
shr (r10b, cl); dump();
shr (r13b, 0xda); dump();
shr (rbp, 4); dump();
shr (rsp, 1); dump();
shr (rdi, cl); dump();
shr (rdi, 0xda); dump();
shr (r10, 4); dump();
shr (r9, 1); dump();
shr (r14, cl); dump();
shr (r15, 0xda); dump();
shr (rax, 4); dump();
shr (rax, 1); dump();
shr (rax, cl); dump();
shr (rax, 0xda); dump();
sal (ebp, 4); dump();
sal (ebx, 1); dump();
sal (ecx, cl); dump();
sal (esp, 0xda); dump();
sal (eax, 4); dump();
sal (eax, 1); dump();
sal (eax, cl); dump();
sal (eax, 0xda); dump();
sal (dl, 4); dump();
sal (bl, 1); dump();
sal (dl, cl); dump();
sal (cl, 0xda); dump();
sal (di, 4); dump();
sal (di, 1); dump();
sal (si, cl); dump();
sal (bx, 0xda); dump();
sal (ax, 4); dump();
sal (ax, 1); dump();
sal (ax, cl); dump();
sal (ax, 0xda); dump();
sal (al, 4); dump();
sal (al, 1); dump();
sal (al, cl); dump();
sal (al, 0xda); dump();
sal (byte [eax+edx], 4); dump();
sal (byte [eax+edx], 1); dump();
sal (byte [eax+edx], cl); dump();
sal (byte [eax+edx], 0xda); dump();
sal (word [esi], 4); dump();
sal (word [esi], 1); dump();
sal (word [esi], cl); dump();
sal (word [esi], 0xda); dump();
sal (dword [ebp*2], 4); dump();
sal (dword [ebp*2], 1); dump();
sal (dword [ebp*2], cl); dump();
sal (dword [ebp*2], 0xda); dump();
sal (r12d, 4); dump();
sal (r8d, 1); dump();
sal (r10d, cl); dump();
sal (r8d, 0xda); dump();
sal (r10w, 4); dump();
sal (r14w, 1); dump();
sal (r12w, cl); dump();
sal (r10w, 0xda); dump();
sal (r9b, 4); dump();
sal (r12b, 1); dump();
sal (r15b, cl); dump();
sal (r11b, 0xda); dump();
sal (rbx, 4); dump();
sal (rsi, 1); dump();
sal (rcx, cl); dump();
sal (rsp, 0xda); dump();
sal (r9, 4); dump();
sal (r9, 1); dump();
sal (r8, cl); dump();
sal (r9, 0xda); dump();
sal (rax, 4); dump();
sal (rax, 1); dump();
sal (rax, cl); dump();
sal (rax, 0xda); dump();
shld (ptr[eax+ecx+3], rsp, 4); dump();
shld (ptr[eax+ecx+3], rdx, cl); dump();
shld (ptr[eax+ecx+3], rsp, 0xda); dump();
shld (ptr[eax+ecx+3], r11, 4); dump();
shld (ptr[eax+ecx+3], r15, cl); dump();
shld (ptr[eax+ecx+3], r15, 0xda); dump();
shld (ptr[eax+ecx+3], rax, 4); dump();
shld (ptr[eax+ecx+3], rax, cl); dump();
shld (ptr[eax+ecx+3], rax, 0xda); dump();
shld (ptr[rdx+r15+0x12], rsi, 4); dump();
shld (ptr[rdx+r15+0x12], rbx, cl); dump();
shld (ptr[rdx+r15+0x12], rcx, 0xda); dump();
shld (ptr[rdx+r15+0x12], r12, 4); dump();
shld (ptr[rdx+r15+0x12], r15, cl); dump();
shld (ptr[rdx+r15+0x12], r15, 0xda); dump();
shld (ptr[rdx+r15+0x12], rax, 4); dump();
shld (ptr[rdx+r15+0x12], rax, cl); dump();
shld (ptr[rdx+r15+0x12], rax, 0xda); dump();
shld (rcx, rcx, 4); dump();
shld (rsp, rcx, cl); dump();
shld (rcx, rcx, 0xda); dump();
shld (rsi, r12, 4); dump();
shld (rbp, r9, cl); dump();
shld (rbp, r10, 0xda); dump();
shld (rcx, rax, 4); dump();
shld (rsp, rax, cl); dump();
shld (rbp, rax, 0xda); dump();
shld (r10, rdi, 4); dump();
shld (r14, rsi, cl); dump();
shld (r8, rcx, 0xda); dump();
shld (r12, r15, 4); dump();
shld (r10, r13, cl); dump();
shld (r8, r15, 0xda); dump();
shld (r12, rax, 4); dump();
shld (r14, rax, cl); dump();
shld (r15, rax, 0xda); dump();
shld (rax, rdx, 4); dump();
shld (rax, rdx, cl); dump();
shld (rax, rcx, 0xda); dump();
shld (rax, r8, 4); dump();
shld (rax, r11, cl); dump();
shld (rax, r13, 0xda); dump();
shld (rax, rax, 4); dump();
shld (rax, rax, cl); dump();
shld (rax, rax, 0xda); dump();
shld (ptr[eax+ecx+3], edx, 4); dump();
shld (ptr[eax+ecx+3], ecx, cl); dump();
shld (ptr[eax+ecx+3], edx, 0xda); dump();
shld (ptr[eax+ecx+3], eax, 4); dump();
shld (ptr[eax+ecx+3], eax, cl); dump();
shld (ptr[eax+ecx+3], eax, 0xda); dump();
shld (ptr[eax+ecx+3], r14d, 4); dump();
shld (ptr[eax+ecx+3], r12d, cl); dump();
shld (ptr[eax+ecx+3], r12d, 0xda); dump();
shld (ebp, ecx, 4); dump();
shld (ecx, ebx, cl); dump();
shld (ebx, ecx, 0xda); dump();
shld (ebx, eax, 4); dump();
shld (edi, eax, cl); dump();
shld (ecx, eax, 0xda); dump();
shld (ecx, r14d, 4); dump();
shld (ecx, r15d, cl); dump();
shld (ecx, r10d, 0xda); dump();
shld (eax, ebp, 4); dump();
shld (eax, edi, cl); dump();
shld (eax, edi, 0xda); dump();
shld (eax, eax, 4); dump();
shld (eax, eax, cl); dump();
shld (eax, eax, 0xda); dump();
shld (eax, r11d, 4); dump();
shld (eax, r10d, cl); dump();
shld (eax, r11d, 0xda); dump();
shld (ptr[rdx+r15+0x12], edx, 4); dump();
shld (ptr[rdx+r15+0x12], edx, cl); dump();
shld (ptr[rdx+r15+0x12], ecx, 0xda); dump();
shld (ptr[rdx+r15+0x12], eax, 4); dump();
shld (ptr[rdx+r15+0x12], eax, cl); dump();
shld (ptr[rdx+r15+0x12], eax, 0xda); dump();
shld (ptr[rdx+r15+0x12], r10d, 4); dump();
shld (ptr[rdx+r15+0x12], r12d, cl); dump();
shld (ptr[rdx+r15+0x12], r11d, 0xda); dump();
shld (r13d, ebx, 4); dump();
shld (r8d, edx, cl); dump();
shld (r13d, ebx, 0xda); dump();
shld (r11d, eax, 4); dump();
shld (r14d, eax, cl); dump();
shld (r15d, eax, 0xda); dump();
shld (r8d, r10d, 4); dump();
shld (r14d, r13d, cl); dump();
shld (r12d, r14d, 0xda); dump();
shld (ptr[eax+ecx+3], cx, 4); dump();
shld (ptr[eax+ecx+3], sp, cl); dump();
shld (ptr[eax+ecx+3], bp, 0xda); dump();
shld (ptr[eax+ecx+3], ax, 4); dump();
shld (ptr[eax+ecx+3], ax, cl); dump();
shld (ptr[eax+ecx+3], ax, 0xda); dump();
shld (ptr[eax+ecx+3], r9w, 4); dump();
shld (ptr[eax+ecx+3], r15w, cl); dump();
shld (ptr[eax+ecx+3], r14w, 0xda); dump();
shld (cx, cx, 4); dump();
shld (di, bp, cl); dump();
shld (bp, bx, 0xda); dump();
shld (si, ax, 4); dump();
shld (cx, ax, cl); dump();
shld (bx, ax, 0xda); dump();
shld (sp, r9w, 4); dump();
shld (bp, r11w, cl); dump();
shld (dx, r12w, 0xda); dump();
shld (ax, bx, 4); dump();
shld (ax, bx, cl); dump();
shld (ax, di, 0xda); dump();
shld (ax, ax, 4); dump();
shld (ax, ax, cl); dump();
shld (ax, ax, 0xda); dump();
shld (ax, r9w, 4); dump();
shld (ax, r12w, cl); dump();
shld (ax, r15w, 0xda); dump();
shld (ptr[rdx+r15+0x12], cx, 4); dump();
shld (ptr[rdx+r15+0x12], dx, cl); dump();
shld (ptr[rdx+r15+0x12], si, 0xda); dump();
shld (ptr[rdx+r15+0x12], ax, 4); dump();
shld (ptr[rdx+r15+0x12], ax, cl); dump();
shld (ptr[rdx+r15+0x12], ax, 0xda); dump();
shld (ptr[rdx+r15+0x12], r9w, 4); dump();
shld (ptr[rdx+r15+0x12], r8w, cl); dump();
shld (ptr[rdx+r15+0x12], r9w, 0xda); dump();
shld (r13w, di, 4); dump();
shld (r8w, bx, cl); dump();
shld (r13w, dx, 0xda); dump();
shld (r12w, ax, 4); dump();
shld (r11w, ax, cl); dump();
shld (r9w, ax, 0xda); dump();
shld (r10w, r12w, 4); dump();
shld (r9w, r10w, cl); dump();
shld (r13w, r9w, 0xda); dump();
shrd (ptr[eax+ecx+3], rdi, 4); dump();
shrd (ptr[eax+ecx+3], rbp, cl); dump();
shrd (ptr[eax+ecx+3], rbp, 0xda); dump();
shrd (ptr[eax+ecx+3], r15, 4); dump();
shrd (ptr[eax+ecx+3], r11, cl); dump();
shrd (ptr[eax+ecx+3], r13, 0xda); dump();
shrd (ptr[eax+ecx+3], rax, 4); dump();
shrd (ptr[eax+ecx+3], rax, cl); dump();
shrd (ptr[eax+ecx+3], rax, 0xda); dump();
shrd (ptr[rdx+r15+0x12], rsi, 4); dump();
shrd (ptr[rdx+r15+0x12], rdi, cl); dump();
shrd (ptr[rdx+r15+0x12], rsi, 0xda); dump();
shrd (ptr[rdx+r15+0x12], r9, 4); dump();
shrd (ptr[rdx+r15+0x12], r13, cl); dump();
shrd (ptr[rdx+r15+0x12], r12, 0xda); dump();
shrd (ptr[rdx+r15+0x12], rax, 4); dump();
shrd (ptr[rdx+r15+0x12], rax, cl); dump();
shrd (ptr[rdx+r15+0x12], rax, 0xda); dump();
shrd (rbx, rcx, 4); dump();
shrd (rcx, rbp, cl); dump();
shrd (rcx, rsp, 0xda); dump();
shrd (rbp, r9, 4); dump();
shrd (rdi, r15, cl); dump();
shrd (rdx, r12, 0xda); dump();
shrd (rsi, rax, 4); dump();
shrd (rcx, rax, cl); dump();
shrd (rbp, rax, 0xda); dump();
shrd (r12, rbp, 4); dump();
shrd (r10, rsi, cl); dump();
shrd (r15, rsi, 0xda); dump();
shrd (r8, r10, 4); dump();
shrd (r15, r15, cl); dump();
shrd (r9, r12, 0xda); dump();
shrd (r12, rax, 4); dump();
shrd (r11, rax, cl); dump();
shrd (r15, rax, 0xda); dump();
shrd (rax, rsp, 4); dump();
shrd (rax, rsi, cl); dump();
shrd (rax, rcx, 0xda); dump();
shrd (rax, r14, 4); dump();
shrd (rax, r14, cl); dump();
shrd (rax, r13, 0xda); dump();
shrd (rax, rax, 4); dump();
shrd (rax, rax, cl); dump();
shrd (rax, rax, 0xda); dump();
shrd (ptr[eax+ecx+3], ebx, 4); dump();
shrd (ptr[eax+ecx+3], edx, cl); dump();
shrd (ptr[eax+ecx+3], ebp, 0xda); dump();
shrd (ptr[eax+ecx+3], eax, 4); dump();
shrd (ptr[eax+ecx+3], eax, cl); dump();
shrd (ptr[eax+ecx+3], eax, 0xda); dump();
shrd (ptr[eax+ecx+3], r15d, 4); dump();
shrd (ptr[eax+ecx+3], r13d, cl); dump();
shrd (ptr[eax+ecx+3], r9d, 0xda); dump();
shrd (ebp, ebp, 4); dump();
shrd (edx, esi, cl); dump();
shrd (ecx, ecx, 0xda); dump();
shrd (edi, eax, 4); dump();
shrd (ebx, eax, cl); dump();
shrd (ecx, eax, 0xda); dump();
shrd (ecx, r14d, 4); dump();
shrd (ecx, r11d, cl); dump();
shrd (esi, r10d, 0xda); dump();
shrd (eax, esi, 4); dump();
shrd (eax, ecx, cl); dump();
shrd (eax, ecx, 0xda); dump();
shrd (eax, eax, 4); dump();
shrd (eax, eax, cl); dump();
shrd (eax, eax, 0xda); dump();
shrd (eax, r13d, 4); dump();
shrd (eax, r14d, cl); dump();
shrd (eax, r14d, 0xda); dump();
shrd (ptr[rdx+r15+0x12], ebp, 4); dump();
shrd (ptr[rdx+r15+0x12], ebp, cl); dump();
shrd (ptr[rdx+r15+0x12], ecx, 0xda); dump();
shrd (ptr[rdx+r15+0x12], eax, 4); dump();
shrd (ptr[rdx+r15+0x12], eax, cl); dump();
shrd (ptr[rdx+r15+0x12], eax, 0xda); dump();
shrd (ptr[rdx+r15+0x12], r15d, 4); dump();
shrd (ptr[rdx+r15+0x12], r12d, cl); dump();
shrd (ptr[rdx+r15+0x12], r8d, 0xda); dump();
shrd (r14d, edi, 4); dump();
shrd (r13d, esi, cl); dump();
shrd (r12d, ecx, 0xda); dump();
shrd (r13d, eax, 4); dump();
shrd (r13d, eax, cl); dump();
shrd (r13d, eax, 0xda); dump();
shrd (r10d, r15d, 4); dump();
shrd (r10d, r8d, cl); dump();
shrd (r11d, r13d, 0xda); dump();
shrd (ptr[eax+ecx+3], di, 4); dump();
shrd (ptr[eax+ecx+3], bp, cl); dump();
shrd (ptr[eax+ecx+3], cx, 0xda); dump();
shrd (ptr[eax+ecx+3], ax, 4); dump();
shrd (ptr[eax+ecx+3], ax, cl); dump();
shrd (ptr[eax+ecx+3], ax, 0xda); dump();
shrd (ptr[eax+ecx+3], r8w, 4); dump();
shrd (ptr[eax+ecx+3], r9w, cl); dump();
shrd (ptr[eax+ecx+3], r12w, 0xda); dump();
shrd (sp, cx, 4); dump();
shrd (dx, cx, cl); dump();
shrd (di, bx, 0xda); dump();
shrd (sp, ax, 4); dump();
shrd (sp, ax, cl); dump();
shrd (bx, ax, 0xda); dump();
shrd (cx, r9w, 4); dump();
shrd (dx, r13w, cl); dump();
shrd (cx, r13w, 0xda); dump();
shrd (ax, di, 4); dump();
shrd (ax, bx, cl); dump();
shrd (ax, dx, 0xda); dump();
shrd (ax, ax, 4); dump();
shrd (ax, ax, cl); dump();
shrd (ax, ax, 0xda); dump();
shrd (ax, r11w, 4); dump();
shrd (ax, r11w, cl); dump();
shrd (ax, r11w, 0xda); dump();
shrd (ptr[rdx+r15+0x12], bx, 4); dump();
shrd (ptr[rdx+r15+0x12], sp, cl); dump();
shrd (ptr[rdx+r15+0x12], bx, 0xda); dump();
shrd (ptr[rdx+r15+0x12], ax, 4); dump();
shrd (ptr[rdx+r15+0x12], ax, cl); dump();
shrd (ptr[rdx+r15+0x12], ax, 0xda); dump();
shrd (ptr[rdx+r15+0x12], r15w, 4); dump();
shrd (ptr[rdx+r15+0x12], r12w, cl); dump();
shrd (ptr[rdx+r15+0x12], r9w, 0xda); dump();
shrd (r11w, bp, 4); dump();
shrd (r10w, bp, cl); dump();
shrd (r14w, bx, 0xda); dump();
shrd (r8w, ax, 4); dump();
shrd (r12w, ax, cl); dump();
shrd (r8w, ax, 0xda); dump();
shrd (r11w, r12w, 4); dump();
shrd (r13w, r15w, cl); dump();
shrd (r9w, r14w, 0xda); dump();
    }
    void gen()
    {
        gen0();
        gen1();
        gen2();
    }
