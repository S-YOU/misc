#include "chacha20.hpp"
#include <cybozu/test.hpp>

void dump(const ChaCha20& cipher)
{
	const uint32_t *s = cipher.getState();
	for (int i = 0; i < 16; i++) {
		printf("%08x ", s[i]);
		if ((i % 4) == 3) printf("\n");
	}
	printf("\n");
}

CYBOZU_TEST_AUTO(rotl)
{
	uint32_t b = 0x7998bfda;
	CYBOZU_TEST_EQUAL(util::rotl(b, 7), 0xcc5fed3c);
}

CYBOZU_TEST_AUTO(qr1)
{
	uint32_t s[4] = {
		0x11111111,
		0x01020304,
		0x9b8d6f43,
		0x01234567,
	};
	uint32_t expect[4] = {
		0xea2a92f4,
		0xcb1cf8ce,
		0x4581472e,
		0x5881c4bb,
	};
	util::qr(s, 0, 1, 2, 3);
	CYBOZU_TEST_EQUAL_ARRAY(s, expect, 4);
}

CYBOZU_TEST_AUTO(qr2)
{
	uint32_t s[16] = {
		0x879531e0,  0xc5ecf37d,  0x516461b1,  0xc9a62f8a,
		0x44c20ef3,  0x3390af7f,  0xd9fc690b,  0x2a5f714c,
		0x53372767,  0xb00a5631,  0x974c541a,  0x359e9963,
		0x5c971061,  0x3d631689,  0x2098d9d6,  0x91dbd320,
	};
	uint32_t expect[16] = {
		0x879531e0,  0xc5ecf37d,  0xbdb886dc,  0xc9a62f8a,
		0x44c20ef3,  0x3390af7f,  0xd9fc690b,  0xcfacafd2,
		0xe46bea80,  0xb00a5631,  0x974c541a,  0x359e9963,
		0x5c971061,  0xccc07c79,  0x2098d9d6,  0x91dbd320,
	};
	util::qr(s, 2, 7, 8, 13);
	CYBOZU_TEST_EQUAL_ARRAY(s, expect, 16);
}

CYBOZU_TEST_AUTO(test10)
{
	uint8_t key[32];
	for (int i = 0; i < 32; i++) {
		key[i] = uint8_t(i);
	}
	uint8_t nonce[12] = { 0, 0, 0, 0, 0, 0, 0, 0x4a, 0, 0, 0, 0 };
	ChaCha20 cipher;
	cipher.init(key, nonce);

	{
		const uint32_t ok[] = {
			0x61707865, 0x3320646e, 0x79622d32, 0x6b206574,
			0x03020100, 0x07060504, 0x0b0a0908, 0x0f0e0d0c,
			0x13121110, 0x17161514, 0x1b1a1918, 0x1f1e1d1c,
			0x00000001, 0x00000000, 0x4a000000, 0x00000000,
		};
		cipher.initState();
		CYBOZU_TEST_EQUAL_ARRAY(cipher.getState(), ok, 16);
	}

	char m[128] = "Ladies and Gentlemen of the class of '99: If I could offer you only one tip for the future, sunscreen would be it.";
	size_t len = strlen(m);
	uint8_t c[128];
	uint8_t expect[128] = {
		0x6e, 0x2e, 0x35, 0x9a, 0x25, 0x68, 0xf9, 0x80, 0x41, 0xba, 0x07, 0x28, 0xdd, 0x0d, 0x69, 0x81,
		0xe9, 0x7e, 0x7a, 0xec, 0x1d, 0x43, 0x60, 0xc2, 0x0a, 0x27, 0xaf, 0xcc, 0xfd, 0x9f, 0xae, 0x0b,
		0xf9, 0x1b, 0x65, 0xc5, 0x52, 0x47, 0x33, 0xab, 0x8f, 0x59, 0x3d, 0xab, 0xcd, 0x62, 0xb3, 0x57,
		0x16, 0x39, 0xd6, 0x24, 0xe6, 0x51, 0x52, 0xab, 0x8f, 0x53, 0x0c, 0x35, 0x9f, 0x08, 0x61, 0xd8,
		0x07, 0xca, 0x0d, 0xbf, 0x50, 0x0d, 0x6a, 0x61, 0x56, 0xa3, 0x8e, 0x08, 0x8a, 0x22, 0xb6, 0x5e,
		0x52, 0xbc, 0x51, 0x4d, 0x16, 0xcc, 0xf8, 0x06, 0x81, 0x8c, 0xe9, 0x1a, 0xb7, 0x79, 0x37, 0x36,
		0x5a, 0xf9, 0x0b, 0xbf, 0x74, 0xa3, 0x5b, 0xe6, 0xb4, 0x0b, 0x8e, 0xed, 0xf2, 0x78, 0x5e, 0x42,
		0x87, 0x4d
	};

	const uint8_t *m8 = (const uint8_t *)m;
	cipher.enc64(c, m8);
	{
		const uint32_t ok[] = {
			0xf3514f22, 0xe1d91b40, 0x6f27de2f, 0xed1d63b8,
			0x821f138c, 0xe2062c3d, 0xecca4f7e, 0x78cff39e,
			0xa30a3b8a, 0x920a6072, 0xcd7479b5, 0x34932bed,
			0x40ba4c79, 0xcd343ec6, 0x4c2c21ea, 0xb7417df0,
		};
		CYBOZU_TEST_EQUAL_ARRAY(cipher.getState(), ok, 16);
	}
	cipher.enc64(c + 64, m8 + 64);
	{
		const uint32_t ok[] = {
			0x9f74a669, 0x410f633f, 0x28feca22, 0x7ec44dec,
			0x6d34d426, 0x738cb970, 0x3ac5e9f3, 0x45590cc4,
			0xda6e8b39, 0x892c831a, 0xcdea67c1, 0x2b7e1d90,
			0x037463f3, 0xa11a2073, 0xe8bcfb88, 0xedc49139,
		};
		CYBOZU_TEST_EQUAL_ARRAY(cipher.getState(), ok, 16);
	}
	CYBOZU_TEST_EQUAL_ARRAY(c, expect, len);
}
