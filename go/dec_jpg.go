package main

import (
	"fmt"
	"image"
	"image/png"
	"io/ioutil"
	"os"
	"path"
	"strings"
)

func ReadDirAll(name string, ss *[]string, suf string) {
	fi, err := os.Stat(name)
	if err != nil {
		fmt.Println("os.Stat", err, name)
		os.Exit(1)
	}
	if fi.Mode().IsDir() {
		fis, err := ioutil.ReadDir(name)
		if err != nil {
			fmt.Println("os.ReadDir", err)
			return
		}
		for _, fi := range fis {
			ReadDirAll(path.Join(name, fi.Name()), ss, suf)
		}
		return
	}
	if suf == "" || strings.HasSuffix(name, suf) {
		*ss = append(*ss, name)
	}
}

func GetPngData(name string) image.Image {
	f, err := os.Open(name)
	if err != nil {
		fmt.Println("os.Open", err)
		os.Exit(1)
	}
	defer f.Close()
	image, err := png.Decode(f)
	if err != nil {
		fmt.Println("png.Decode", name, err)
		os.Exit(1)
	}
	return image
}

func SplitImage(image image.Image, w, h, x0, y0 int) []byte {
	b := make([]byte, w*h)
	for x := 0; x < w; x++ {
		for y := 0; y < h; y++ {
			r, _, _, _ := image.At(x+x0, y+y0).RGBA()
			if r > 0 {
				r = 1
			}
			b[x+y*w] = byte(r)
		}
	}
	return b
}

func PutPattern(b []byte, w int) {
	for i := 0; i < len(b); i++ {
		fmt.Printf("%d,", b[i])
		if i%w == w-1 {
			fmt.Println("")
		}
	}
}

const W int = 10
const H int = 14

func setup() [][]byte {
	numTbl := [][]byte{
		{ // 0
			1, 1, 1, 0, 0, 0, 0, 0, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 1, 1, 1, 0, 0, 0,
			0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
			0, 0, 0, 1, 1, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 1, 1, 0, 0,
			0, 0, 0, 0, 1, 1, 1, 0, 0, 0,
			0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 1, 1, 0, 0, 0, 0, 0, 1, 1,
		},
		{ // 1
			1, 1, 1, 0, 0, 0, 0, 1, 1, 1,
			1, 1, 0, 0, 0, 0, 0, 1, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 1, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 1, 1, 1,
			1, 0, 0, 1, 0, 0, 0, 1, 1, 1,
			1, 1, 1, 1, 0, 0, 0, 1, 1, 1,
			1, 1, 1, 1, 0, 0, 0, 1, 1, 1,
			1, 1, 1, 1, 0, 0, 0, 1, 1, 1,
			1, 1, 1, 1, 0, 0, 0, 1, 1, 1,
			1, 1, 1, 1, 0, 0, 0, 1, 1, 1,
			1, 1, 1, 1, 0, 0, 0, 1, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		},
		{ // 2
			1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 0, 0, 1, 1, 1, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 0, 0, 0, 1,
			1, 1, 1, 1, 1, 0, 0, 0, 0, 1,
			1, 1, 1, 1, 0, 0, 0, 0, 1, 1,
			1, 1, 1, 0, 0, 0, 0, 1, 1, 1,
			1, 1, 0, 0, 0, 0, 1, 1, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		},
		{ // 3
			1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 1, 1, 1, 1, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
			1, 1, 1, 0, 0, 0, 0, 0, 0, 1,
			1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
			1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 1, 1,
		},
		{ // 4
			1, 1, 1, 1, 1, 0, 0, 0, 0, 1,
			1, 1, 1, 1, 0, 0, 0, 0, 0, 1,
			1, 1, 1, 0, 0, 0, 0, 0, 0, 1,
			1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 1, 0, 0, 0, 1, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 1, 0, 0, 0, 1,
			0, 0, 0, 0, 1, 1, 0, 0, 0, 1,
			0, 0, 0, 1, 1, 1, 0, 0, 0, 1,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 0, 0, 0, 1,
			1, 1, 1, 1, 1, 1, 0, 0, 0, 1,
			1, 1, 1, 1, 1, 1, 0, 0, 0, 1,
		},
		{ // 5
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
			1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 1, 1, 1,
		},
		{ // 6
			1, 1, 1, 0, 0, 0, 0, 0, 0, 1,
			1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			0, 0, 0, 0, 0, 1, 1, 1, 1, 1,
			0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
			0, 0, 0, 0, 0, 0, 0, 0, 1, 1,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 1, 1, 1, 0, 0, 0,
			0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
			0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
		},
		{ // 7
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 0, 0, 0, 1,
			1, 1, 1, 1, 1, 0, 0, 0, 0, 1,
			1, 1, 1, 1, 1, 0, 0, 0, 1, 1,
			1, 1, 1, 1, 0, 0, 0, 0, 1, 1,
			1, 1, 1, 1, 0, 0, 0, 1, 1, 1,
			1, 1, 1, 0, 0, 0, 0, 1, 1, 1,
			1, 1, 1, 0, 0, 0, 1, 1, 1, 1,
			1, 1, 0, 0, 0, 0, 1, 1, 1, 1,
			1, 0, 0, 0, 0, 1, 1, 1, 1, 1,
			1, 0, 0, 0, 0, 1, 1, 1, 1, 1,
		},
		{ // 8
			1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
			0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
			0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
			0, 0, 0, 1, 1, 1, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
		},
		{ // 9
			1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
			0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
			0, 0, 0, 1, 1, 1, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
			1, 1, 1, 1, 1, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 1, 1,
			1, 0, 0, 0, 0, 0, 1, 1, 1, 1,
		},
		{ // a
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 1, 1, 1, 1, 0, 0, 0,
			1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 1, 1, 1, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
		},
		{ // b
			1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
			1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
			1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 1, 1, 0, 0, 0,
			1, 0, 0, 0, 1, 1, 1, 1, 0, 0,
			1, 0, 0, 0, 1, 1, 1, 1, 0, 0,
			1, 0, 0, 0, 1, 1, 1, 1, 0, 0,
			1, 0, 0, 0, 1, 1, 1, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
		},
		{ // c
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 0, 0, 0, 0, 0, 0, 1,
			1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 1, 1, 1, 0, 0,
			1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
			1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
			1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
			1, 0, 0, 0, 0, 1, 1, 1, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 1, 1, 0, 0, 0, 0, 0, 1,
		},
		{ // d
			1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
			1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
			1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 1, 1, 1, 0, 0, 0,
			0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
			0, 0, 0, 1, 1, 1, 1, 0, 0, 0,
			0, 0, 0, 1, 1, 1, 0, 0, 0, 0,
			0, 0, 0, 0, 1, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 0, 0, 0, 0, 1, 0, 0, 0,
		},
		{ // e
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 0, 0, 0, 0, 0, 0, 1, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 1, 1, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 1, 1, 1, 1, 1, 1,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 0, 0, 0, 0, 0, 0, 0, 0, 1,
			1, 1, 0, 0, 0, 0, 0, 0, 0, 1,
		},
		{ // f
			1, 1, 1, 1, 0, 0, 0, 0, 0, 0,
			1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 1, 0, 0, 0, 0, 1, 1, 1,
			1, 1, 1, 0, 0, 0, 1, 1, 1, 1,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			1, 1, 1, 0, 0, 0, 1, 1, 1, 1,
			1, 1, 1, 0, 0, 0, 1, 1, 1, 1,
			1, 1, 1, 0, 0, 0, 1, 1, 1, 1,
			1, 1, 1, 0, 0, 0, 1, 1, 1, 1,
			1, 1, 1, 0, 0, 0, 1, 1, 1, 1,
			1, 1, 1, 0, 0, 0, 1, 1, 1, 1,
			1, 1, 1, 0, 0, 0, 1, 1, 1, 1,
		},
	}
	return numTbl
	/*
		image := GetPngData("img/1.png")
		gw := image.Bounds().Max.X
		gh := image.Bounds().Max.Y
		r := make([][]byte, 16)
		for y := 12; y < gh; y += 22 {
			for x := 9; x < gw; x += 36 {
				b := SplitImage(image, W, H, x, y)
				PutPattern(b, W)
				b = SplitImage(image, W, H, x + 12, y)
				PutPattern(b, W)
			}
		}
		return r
	*/
}

func IsSameImage(a, b []byte) (s int) {
	for i := 0; i < len(a); i++ {
		d := int(a[i]) - int(b[i])
		s += d * d
	}
	return
}

func IsOne(a []byte) bool {
	for i := 0; i < len(a); i++ {
		if a[i] != 1 {
			return false
		}
	}
	return true
}

func FindNum(tbl [][]byte, a []byte) int {
	for i := 0; i < 16; i++ {
		d := IsSameImage(tbl[i], a)
		if d <= 2 {
			return i
		}
	}
	return -1
}

func ReadBinary(tbl [][]byte, name string) (r string) {
	image := GetPngData(name)
	gw := image.Bounds().Max.X
	gh := image.Bounds().Max.Y
	for y := 12; y < gh - H; y += 22 {
		for x := 9; x < gw - W; x += 36 {
			s0 := SplitImage(image, W, H, x, y)
			if IsOne(s0) {
				continue
			}
			a := FindNum(tbl, s0)
			s1 := SplitImage(image, W, H, x+12, y)
			b := FindNum(tbl, s1)
			if a < 0 || b < 0 {
				fmt.Println("bad char", name, x, y, len(r))
				fmt.Println("a", a)
				PutPattern(s0, W)
				fmt.Println("b", b)
				PutPattern(s1, W)
				os.Exit(1)
			}
			v := a * 16 + b
			r = r + fmt.Sprintf("%02x", v)
		}
	}
	if len(r) != 62 {
		fmt.Println("bad byte", name, len(r))
		fmt.Println(r)
		os.Exit(1)
	}
	return
}

func candidate(s string) bool {
	tbl := []string {
		"30363039", // '0609'
		"cd80", // int 80h
	}
	for i := 0; i < len(tbl); i++ {
		if !strings.Contains(s, tbl[i]) {
			return false
		}
	}
	return true
}

func main() {
	if len(os.Args) == 1 {
		fmt.Println("dec_jpg (file|dir)")
		return
	}
	const W int = 10
	tbl := setup()
	var ss []string
	ReadDirAll(os.Args[1], &ss, ".jpg")
	for _, name := range ss {
		s := ReadBinary(tbl, name)
		if candidate(s) {
			fmt.Printf("%s %s\n", name, s)
		}
	}
}
